{"type": "root", "attrs": {"type": "node", "context": "sop", "icon": "SOP/booleanfracture", "internal": "booleanfracture", "since": "17.0", "tags": "break", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Boolean Fracture"], "extent": [108, 129]}, {"type": "summary", "indent": 0, "text": ["Fractures the input geometry using cutting surfaces."], "extent": [129, 190]}, {"type": "para", "indent": 0, "text": ["This SOP fractures the input mesh using one or more cutting surfaces.\nSimilar to ", {"scheme": "Node", "value": "/nodes/sop/voronoifracture", "type": "link", "text": ["Voronoi Fracture"], "fullpath": "/nodes/sop/voronoifracture.html"}, ", this is a higher-level node (based on the ", {"scheme": "Node", "value": "/nodes/sop/boolean", "type": "link", "text": ["Boolean SOP"], "fullpath": "/nodes/sop/boolean.html"}, ") that handles common fracturing-related tasks such as naming pieces, recomputing normals, and building constraints between adjacent pieces."], "extent": [190, 530]}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [530, 538], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Geometry to Fracture"], "extent": [538, 561], "body": [{"type": "para", "indent": 4, "text": ["The polygonal geometry that will be fractured."], "extent": [561, 613]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Cutting Surface"], "extent": [613, 630], "body": [{"type": "para", "indent": 4, "text": ["The polygonal cutting surfaces to fracture the geometry with."], "extent": [630, 697]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "outputs", "container": true, "type": "outputs_section", "indent": 0, "role": "section", "extent": [697, 706], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Fractured Geometry"], "extent": [706, 727], "body": [{"type": "para", "indent": 4, "text": ["The fractured polygonal geometry."], "extent": [727, 766]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Constraint Geometry"], "extent": [766, 787], "body": [{"type": "para", "indent": 4, "text": ["Geometry containing a point for each piece, and polygon lines connecting pieces that are adjacent. This is useful for creating a ", {"scheme": "Node", "value": "/nodes/dop/constraintnetwork", "type": "link", "text": ["constraint network"], "fullpath": "/nodes/dop/constraintnetwork.html"}, "."], "extent": [787, 970]}], "container": true}], "container": true}], "text": "Outputs"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [970, 982], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [982, 990], "body": [{"type": "para", "indent": 4, "text": ["The geometry to be fractured.\n    If no group is specified, the full input geometry will be fractured."], "extent": [990, 1098]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Pieces"], "extent": [1098, 1113], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Name Attribute"], "extent": [2646, 2662], "body": [{"type": "para", "indent": 4, "text": ["Specifies how the ", {"type": "code", "text": ["name"]}, " primitive attribute (which identifies the primitives belonging to each piece) is created."], "extent": [2682, 2802]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Overwrite"], "extent": [2802, 2817], "body": [{"type": "para", "indent": 8, "text": ["Constructs the name by combining the ", {"type": "ui", "text": ["Piece Prefix"]}, " with the piece number."], "extent": [2817, 2902]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Append"], "extent": [2902, 2914], "body": [{"type": "para", "indent": 8, "text": ["If the original geometry already has a ", {"type": "code", "text": ["name"]}, " primitive attribute, it is prefixed with the ", {"type": "ui", "text": ["Fracture Namespace"]}, " and then the ", {"type": "ui", "text": ["Piece Prefix"]}, " and piece number are appended to it.\n        This is useful when performing multiple levels of fracturing."], "extent": [2914, 3174]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "namemethod"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Fracture Namespace"], "extent": [3174, 3194], "body": [{"type": "para", "indent": 4, "text": ["Adds a prefix to the name of each input piece when ", {"type": "ui", "text": ["Name Attribute"]}, " is set to ", {"type": "ui", "text": ["Append"]}, ".\n    This can be useful for avoiding duplicate piece names or grouping the new pieces that are created."], "extent": [3221, 3421]}], "container": true, "attrs": {"id": "fracturenamespace"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Piece Prefix"], "extent": [3421, 3435], "body": [{"type": "para", "indent": 4, "text": ["The prefix applied to the name of each piece created by the fracture."], "extent": [3455, 3530]}], "container": true, "attrs": {"id": "nameprefix"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Compute Interior Normals"], "extent": [3530, 3556], "body": [{"type": "para", "indent": 4, "text": ["Computes vertex normals on the edges of the interior geometry, so that they will have a cusped appearance."], "extent": [3588, 3700]}], "container": true, "attrs": {"id": "computeinteriornormals"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Interior Cusp Angle"], "extent": [3700, 3721], "body": [{"type": "para", "indent": 4, "text": ["Computes vertex normals on the edges of the interior geometry with angles greater than this angle, so that they will have a cusped appearance."], "extent": [3748, 3896]}], "container": true, "attrs": {"id": "interiorcuspangle"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Exterior Normals"], "extent": [3896, 3914], "body": [{"type": "para", "indent": 4, "text": ["Specifies how to compute or update vertex normals for the input geometry."], "extent": [3946, 4025]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Preserve Existing Normals"], "extent": [4025, 4056], "body": [{"type": "para", "indent": 8, "text": ["Only compute vertex normals if the input geometry does not already have normals and ", {"type": "ui", "text": ["Compute Interior Normals"]}, " is enabled."], "extent": [4056, 4190]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Recompute Normals"], "extent": [4190, 4213], "body": [{"type": "para", "indent": 8, "text": ["Always compute vertex normals for the input geometry."], "extent": [4213, 4276]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Do Not Compute Normals"], "extent": [4276, 4304], "body": [{"type": "para", "indent": 8, "text": ["Do not compute normals for the input geometry. If ", {"type": "ui", "text": ["Compute Interior Normals"]}, " is still enabled, though, smooth normals will be computed."], "extent": [4304, 4451]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "computeexteriornormals"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Exterior Cusp Angle"], "extent": [4451, 4472], "body": [{"type": "para", "indent": 4, "text": ["Computes vertex normals on the edges of the input geometry with angles greater than this angle, so that they will have a cusped appearance."], "extent": [4499, 4644]}], "container": true, "attrs": {"id": "exteriorcuspangle"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Output Attributes"], "extent": [1502, 1528], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Attribute Name Prefix"], "extent": [1528, 1552], "body": [{"type": "para", "indent": 4, "text": ["Specifies a prefix for the attribute or group names specified by the ", {"type": "ui", "text": ["Primitive Piece"]}, ", ", {"type": "ui", "text": ["Interior Group"]}, ", and ", {"type": "ui", "text": ["Exterior Group"]}, " parameters.\n    This can make it easier to create unique attribute names when performing multiple levels of fracturing."], "extent": [1578, 1836]}], "container": true, "attrs": {"id": "attribnameprefix"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Piece"], "extent": [5030, 5047], "body": [{"type": "para", "indent": 4, "text": ["The name of the attribute containing the piece number with which each primitive is associated."], "extent": [5068, 5168]}], "container": true, "attrs": {"id": "pieceattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Copy Cutting Surface Attributes"], "extent": [1886, 1919], "body": [{"type": "para", "indent": 4, "text": ["Copy attributes from the input cutting surface to the output piece\u2019s interior geometry."], "extent": [1919, 2012]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Point Attributes"], "extent": [2012, 2030], "body": [{"type": "para", "indent": 4, "text": ["The point attributes to copy from the cutting surface to the points of the output piece\u2019s interior geometry."], "extent": [2030, 2144]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Vertex Attributes"], "extent": [2144, 2163], "body": [{"type": "para", "indent": 4, "text": ["The vertex attributes to copy from the cutting surface to the vertices of the output piece\u2019s interior geometry."], "extent": [2163, 2280]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Attributes"], "extent": [2280, 2302], "body": [{"type": "para", "indent": 4, "text": ["The primitive attributes to copy from the cutting surface to the primitives of the output piece\u2019s interior geometry."], "extent": [2302, 2424]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Output Groups"], "extent": [2424, 2446], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Interior Group"], "extent": [5441, 5457], "body": [{"type": "para", "indent": 4, "text": ["The group containing any primitives in the interior surfaces created during fracturing."], "extent": [5480, 5573]}], "container": true, "attrs": {"id": "interiorgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Exterior Group"], "extent": [5573, 5589], "body": [{"type": "para", "indent": 4, "text": ["The group containing the primitives in the original input geometry."], "extent": [5612, 5685]}], "container": true, "attrs": {"id": "exteriorgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Merge with Existing Groups"], "extent": [5685, 5713], "body": [{"type": "para", "indent": 4, "text": ["If the interior and exterior groups already exist on the geometry from a previous fracture, the new interior primitives will be added to the interior group and the original exterior group will be preserved.\n    This behavior results in an interior group that contains all of the interior primitives created by multiple fracture operations (which can be useful for the ", {"scheme": "Node", "value": "/nodes/sop/rbdinteriordetail", "type": "link", "text": ["RBD Interior Detail SOP"], "fullpath": "/nodes/sop/rbdinteriordetail.html"}, ").\n    Otherwise, the interior group will be overwritten to only contain the interior primitives added by this node, and the exterior group will contain all of the input primitives."], "extent": [5734, 6341]}], "container": true, "attrs": {"id": "mergegroups"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Interior Seams"], "extent": [2601, 2617], "body": [{"type": "para", "indent": 4, "text": ["Creates a group containing edges representing the seams where the cutting geometry intersects itself."], "extent": [2617, 2724]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Exterior Seams"], "extent": [2724, 2740], "body": [{"type": "para", "indent": 4, "text": ["Creates a group containing edges representing the seams where the cutting geometry intersects the original input geometry."], "extent": [2740, 2868]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pieces Inside Cutting Geometry"], "extent": [2868, 2900], "body": [{"type": "para", "indent": 4, "text": ["Creates a primitive group containing the pieces that are enclosed by the cutting geometry.\n    This is supported when the input geometry and cutting geometry are both treated as a solid."], "extent": [2900, 3092]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Surface Inside Cutting Geometry"], "extent": [3092, 3125], "body": [{"type": "para", "indent": 4, "text": ["Creates a group containing the polygons from the original input geometry that are enclosed by the cutting geometry.\n    This is supported when the cutting geometry is treated as a solid."], "extent": [3125, 3317]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Boolean Settings"], "extent": [3317, 3342], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Treat Geometry As"], "extent": [3342, 3362], "body": [{"type": "para", "indent": 4, "text": ["Whether to treat this geometry like the boundary of a solid object, or as a flat surface with no interior or exterior."], "extent": [14840, 14964]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Treat Cutting Geometry As"], "extent": [3406, 3433], "body": [{"type": "para", "indent": 4, "text": ["Whether to treat this geometry like the boundary of a solid object, or as a flat surface with no interior or exterior."], "extent": [14840, 14964]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Detriangulate"], "extent": [15801, 15816], "body": [{"type": "para", "indent": 4, "text": ["Internally, this node converts the input geometry to triangles. This controls whether to convert the triangulated geometry back to N-gons matching the originals for output."], "extent": [15844, 16022]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Polygons"], "extent": [16022, 16040], "body": [{"type": "para", "indent": 8, "text": ["Merge neighboring triangles originating from the same input polygon back together."], "extent": [16040, 16136]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Only Unchanged Polygons"], "extent": [16136, 16165], "body": [{"type": "para", "indent": 8, "text": ["If an input polygon is cut as part of the operation, keep it as triangles. Otherwise put triangulated polygons back together."], "extent": [16165, 16300]}], "container": true}, {"type": "dt", "indent": 4, "text": ["No polygons"], "extent": [16300, 16318], "body": [{"type": "para", "indent": 8, "text": ["Output the triangulated geometry."], "extent": [16318, 16361]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "detriangulate"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Assume seam polygons are flat"], "extent": [16361, 16392], "body": [{"type": "para", "indent": 4, "text": ["Most ", {"type": "q", "text": ["flat"]}, " polygons are not technically flat because of floating-point precision issues. This ignores those kinds of differences when de-triangulating the output. The default (on) is fine in almost all cases, but you may want to turn this off if you are doing procedural booleans on geometry with extremely fine detail/separation between surfaces. Turning this off will result in more triangles in the output."], "extent": [16425, 16845]}, {"type": "para", "indent": 4, "text": ["See the ", {"scheme": null, "value": "#tips", "type": "link", "text": ["tips and notes"], "fullpath": "/nodes/sop/boolean.html#tips", "fragment": "#tips"}, " above for more information."], "extent": [16845, 16913]}], "container": true, "attrs": {"id": "removeinlinepoints"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Collapse tiny seam-adjacent edges"], "extent": [17201, 17236], "body": [{"type": "para", "indent": 4, "text": ["Even if you try very hard to align edges on the two models you are combining, tiny numeric precision errors can (and usually will) cause the edges to be microscopically mis-aligned, creating extra edges in the output. When this option is on, the node intelligently fuses these tiny edges away. You should not turn this off unless you really know that you want microscopically thin polygons for some reason."], "extent": [17268, 17684]}, {"type": "para", "indent": 4, "text": [{"scheme": "Image", "value": "/images/nodes/sop/boolean_tinyedges.svg", "type": "img", "text": ""}], "extent": [17684, 17737]}], "container": true, "attrs": {"id": "collapsetinyedges"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Edge length threshold"], "extent": [17737, 17760], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Collapse tiny seam-adjacent edges"]}, " is on, edges this length or smaller are automatically fused in the output."], "extent": [17790, 17913]}], "container": true, "attrs": {"id": "lengththreshold"}, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [3664, 3673], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/sop/boolean", "type": "link", "text": "", "fullpath": "/nodes/sop/boolean.html"}], "extent": [3673, 3698]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/sop/rbdinteriordetail", "type": "link", "text": "", "fullpath": "/nodes/sop/rbdinteriordetail.html"}], "extent": [3698, 3733]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/sop/voronoifracture", "type": "link", "text": "", "fullpath": "/nodes/sop/voronoifracture.html"}], "extent": [3733, 3766]}], "container": true}], "text": "Related"}], "title": ["Boolean Fracture"], "summary": ["Fractures the input geometry using cutting surfaces."], "included": ["/nodes/sop/boolean", "/nodes/sop/voronoifracture"]}