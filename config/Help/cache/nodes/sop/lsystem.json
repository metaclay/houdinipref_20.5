{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "lsystem", "icon": "SOP/lsystem", "bestbet": "lsystem", "tags": "tech, create, curves", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["L-System"], "extent": [0, 13]}, {"type": "summary", "indent": 0, "text": ["Creates fractal geometry from the recursive application of simple rules."], "extent": [125, 205]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["About L-systems"], "extent": [205, 227], "body": [{"type": "para", "indent": 0, "text": ["L-systems (", {"type": "em", "text": ["Lindenmayer-systems"]}, ", named after Aristid Lindenmayer,\n1925-1989), allow definition of complex shapes through the use of\niteration. They use a mathematical language in which an initial string\nof characters is matched against rules which are evaluated repeatedly,\nand the results are used to generate geometry. The result of each\nevaluation becomes the basis for the next iteration of geometry, giving\nthe illusion of growth."], "extent": [227, 666]}, {"type": "para", "indent": 0, "text": ["The ", {"scheme": "Node", "value": "/nodes/sop/lsystem", "type": "link", "text": ["L-system SOP"], "fullpath": "/nodes/sop/lsystem"}, " lets you simulate complex organic\nstructures such as trees, lightning, snowflakes, flowers, and other\nbranching phenomena."], "extent": [666, 826]}, {"level": 3, "id": "includeme", "container": true, "type": "h", "indent": 0, "text": ["Placing an L-System in the viewer"], "extent": [295, 347], "body": [{"type": "task_group", "body": [{"ext": null, "type": "task", "indent": 4, "text": ["Place the L-System anywhere in the scene"], "role": "item", "extent": [347, 404], "body": [{"type": "ord_group", "body": [{"blevel": 10, "type": "ord", "indent": 8, "text": ["Click the ", {"scheme": "Icon", "value": "SOP/lsystem", "type": "link", "text": "", "fullpath": "/shelf/SOP/lsystem"}, " ", {"scheme": null, "value": "/nodes/sop/lsystem", "type": "link", "text": ["L-System"], "fullpath": "/nodes/sop/lsystem"}, " tool on the ", {"type": "ui", "text": ["Create"]}, " tab."], "extent": [404, 514]}, {"blevel": 10, "type": "ord", "indent": 8, "text": ["Move the cursor into the ", {"scheme": null, "value": "/ref/views/3dview", "type": "link", "text": ["scene view"], "fullpath": "/ref/views/3dview"}, ". "], "extent": [514, 582], "body": [{"type": "note_group", "body": [{"type": "note", "indent": 12, "role": "item", "extent": [582, 600], "body": [{"type": "para", "indent": 16, "text": ["You can hold ", {"keys": ["Alt"], "type": "keys", "text": null}, " to detach the L-System from the construction plane."], "extent": [600, 702]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"blevel": 10, "type": "ord", "indent": 8, "text": ["Click ", {"keys": ["LMB"], "type": "keys", "text": null}, " to place the L-System anywhere in the ", {"scheme": null, "value": "/ref/views/3dview", "type": "link", "text": ["scene view"], "fullpath": "/ref/views/3dview"}, " and press ", {"keys": ["Enter"], "type": "keys", "text": null}, " to confirm your selection. "], "extent": [702, 843], "body": [{"type": "para", "indent": 12, "text": ["If you press ", {"keys": ["Enter"], "type": "keys", "text": null}, " without clicking, Houdini places the L-System at the origin."], "extent": [843, 948]}], "container": true}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 4, "text": ["Place the L-System at the origin"], "role": "item", "extent": [948, 992], "body": [{"type": "para", "indent": 8, "text": ["Press ", {"keys": ["Ctrl", "LMB"], "type": "keys", "text": null}, " on the ", {"scheme": "Icon", "value": "SOP/lsystem", "type": "link", "text": "", "fullpath": "/shelf/SOP/lsystem"}, " ", {"scheme": null, "value": "/nodes/sop/lsystem", "type": "link", "text": ["L-System"], "fullpath": "/nodes/sop/lsystem"}, " tool on the ", {"scheme": null, "value": "/shelf/", "type": "link", "text": ["shelf"], "fullpath": "/shelf/index"}, "."], "extent": [992, 1119]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": [{"scheme": "Image", "value": "/images/shelf/lsystem.jpg", "type": "img", "text": ""}], "extent": [1119, 1166]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "text": [" "], "role": "item", "extent": [1166, 1177], "body": [{"type": "para", "indent": 8, "text": ["L-systems can be moved once they are placed by either dragging them in the scene view or changing the values in the ", {"scheme": null, "value": "/ref/panes/parms", "type": "link", "text": ["parameter editor"], "fullpath": "/ref/panes/parms"}, "."], "extent": [1177, 1343]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Default L-Systems can be chosen from the ", {"scheme": "Icon", "value": "BUTTONS/gear", "type": "link", "text": "", "fullpath": "/shelf/BUTTONS/gear"}, " Gear drop-down menu at the geometry level."], "extent": [1343, 1456]}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 4, "text": ["L-System Handles"], "extent": [1456, 1483], "body": [{"type": "para", "indent": 4, "text": ["The L-System does not have its own rotation parameters; however, you can rotate it at the object level using the handles in the ", {"scheme": null, "value": "/ref/views/3dview", "type": "link", "text": ["scene view"], "fullpath": "/ref/views/3dview"}, " or by adding a ", {"scheme": "Icon", "value": "SOP/xform", "type": "link", "text": "", "fullpath": "/shelf/SOP/xform"}, {"scheme": "Node", "value": "/nodes/sop/xform", "type": "link", "text": ["Transform"], "fullpath": "/nodes/sop/xform"}, " node at the geometry level."], "extent": [1483, 1737]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [1737, 1747], "body": [{"type": "para", "indent": 8, "text": ["The origin of the L-System is at the base of the tree, not the middle of the object."], "extent": [1747, 1841]}], "container": true}], "container": true, "role": "item_group"}]}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Fractal properties"], "extent": [862, 887], "body": [{"type": "para", "indent": 0, "text": ["There are several factors which combine to organize plant structures\nand contribute to their beauty. These include:"], "extent": [887, 1005]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["symmetry"], "extent": [1005, 1017]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["self-similarity"], "extent": [1017, 1036]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["developmental algorithms"], "extent": [1036, 1064]}], "container": true}, {"type": "para", "indent": 0, "text": ["With L-systems, we are mostly concerned with the latter two.\nSelf-similarity implies an underlying fractal structure which is\nprovided through strings of L-systems. Benoit Mandelbrot describes\nself-similarity as follows:"], "extent": [1064, 1286]}, {"type": "para", "indent": 0, "text": [{"type": "q", "text": ["When each piece of a shape is geometrically similar to the whole,\nboth the shape and the cascade that generate it are called\nself-similar."]}], "extent": [1286, 1428]}, {"type": "para", "indent": 0, "text": ["L-systems provide a grammar for describing the growth of\nself-similar structures in time. L-system rules determine the\nunderlying structures of growth in a way that is analogous to the\nway that DNA is thought to determine biological growth. This growth\nrelies on the principle of self-similarity to provide extremely\ncompact descriptions of complex surfaces."], "extent": [1428, 1788]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Rewriting"], "extent": [1788, 1804], "body": [{"type": "para", "indent": 0, "text": ["The central concept of L-systems is ", {"type": "em", "text": ["rewriting"]}, ". This works by\nrecursively replacing an initial state (the ", {"type": "em", "text": ["initiator"]}, ") with\nrewritten geometry (the ", {"type": "em", "text": ["generator"]}, "), reduced and displaced to have\nthe same end points as those of the interval being replaced."], "extent": [1804, 2060]}, {"type": "para", "indent": 0, "text": ["In 1968, Astrid Lindenmayer introduced a string rewriting mechanism\ntermed ", {"type": "q", "text": ["L-systems"]}, ". The grammar of L-systems is unique in that the\nmethod of applying productions is applied in parallel and\nsimultaneously replaces all letters in a given ", {"type": "q", "text": ["word"]}, "."], "extent": [2060, 2309]}, {"type": "para", "indent": 0, "text": ["The simplest example of a rewriting grammar is where two ", {"type": "q", "text": ["words"]}, " or\nstrings are used, built from the two letters: ", {"type": "code", "text": ["a"]}, " and ", {"type": "code", "text": ["b"]}, ", which may\noccur many times in a string. Each letter is associated with a\nrewriting rule. The rule ", {"type": "code", "text": ["a = ab"]}, " means that the letter ", {"type": "code", "text": ["a"]}, " is to be\nreplaced by the string ", {"type": "code", "text": ["ab"]}, ", and the rule ", {"type": "code", "text": ["b = a"]}, " means that the\nletter ", {"type": "code", "text": ["b"]}, " is to be replaced by ", {"type": "code", "text": ["a"]}, "."], "extent": [2309, 2681]}, {"type": "para", "indent": 0, "text": ["If we start the process with the letter ", {"type": "code", "text": ["b"]}, " (the ", {"type": "em", "text": ["premise"]}, "), and\nfollow it through in time, we see a certain pattern emerges by\nfollowing the rewriting rules:"], "extent": [2681, 2841]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/nodes/Houdini-03-1-089.jpg", "type": "img", "text": ""}], "extent": [2841, 2885]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Production rule syntax"], "extent": [2885, 2914], "body": [{"type": "para", "indent": 0, "text": ["The general form of an L-system rule is:"], "extent": [2914, 2957]}, {"lang": null, "type": "pre", "indent": 0, "text": ["\n[left_context<] symbol [>right_context] [:condition]=replacement [:probability]\n"], "extent": [2957, 3045]}, {"type": "para", "indent": 0, "text": ["Where\u2026"], "extent": [3045, 3056]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["left_context"], "extent": [3056, 3070], "body": [{"type": "para", "indent": 4, "text": ["An optional string that must precede the ", {"type": "var", "text": ["symbol"]}, " for this rule to\n    match."], "extent": [3070, 3154]}], "container": true}, {"type": "dt", "indent": 0, "text": ["symbol"], "extent": [3154, 3162], "body": [{"type": "para", "indent": 4, "text": ["The symbol to replace. For example, if the symbol is ", {"type": "code", "text": ["A"]}, ",\n    occurrences of ", {"type": "code", "text": ["A"]}, " in the initial string will be replaced with\n    ", {"type": "var", "text": ["replacement"]}, " (if this rule matches)."], "extent": [3162, 3335]}], "container": true}, {"type": "dt", "indent": 0, "text": ["right_context"], "extent": [3335, 3350], "body": [{"type": "para", "indent": 4, "text": ["An optional string that must follow the ", {"type": "var", "text": ["symbol"]}, " for this rule to\n    match."], "extent": [3350, 3433]}], "container": true}, {"type": "dt", "indent": 0, "text": ["condition"], "extent": [3433, 3444], "body": [{"type": "para", "indent": 4, "text": ["An optional expression that must be true for this rule to match."], "extent": [3444, 3513]}], "container": true}, {"type": "dt", "indent": 0, "text": ["replacement"], "extent": [3513, 3526], "body": [{"type": "para", "indent": 4, "text": ["The string that will replace the ", {"type": "var", "text": ["symbol"]}, " (if this rule matches)."], "extent": [3526, 3598]}], "container": true}, {"type": "dt", "indent": 0, "text": ["probability"], "extent": [3598, 3611], "body": [{"type": "para", "indent": 4, "text": ["The optional chance (between 0 and 1) that this rule will be executed.\n    For example, using ", {"type": "code", "text": ["0.8"]}, " means this rule will execute 80% of the time."], "extent": [3611, 3762]}], "container": true}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [3762, 3767], "body": [{"type": "para", "indent": 4, "text": ["You can use ", {"type": "code", "text": ["->"]}, " in production rules instead of ", {"type": "code", "text": ["="]}, ". The meaning is\n    identical."], "extent": [3767, 3855]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Turtle commands"], "extent": [3855, 3877], "body": [{"type": "para", "indent": 0, "text": ["We can combine this string-manipulation system with a graphics\nroutine that interprets the strings as commands for a drawing\n", {"type": "q", "text": ["turtle"]}, " with a position (XYZ) and heading (angle). By following the\ncommands, the turtle traces out a shape as it moves."], "extent": [3877, 4126]}, {"type": "para", "indent": 0, "text": ["Examples of simple turtle commands:"], "extent": [4126, 4163]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["F"]}, " "], "extent": [4163, 4169], "body": [{"type": "para", "indent": 4, "text": ["Move forward a step, drawing a line connecting the previous\n    position to the new position."], "extent": [4169, 4267]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["f"]}, " "], "extent": [4267, 4273], "body": [{"type": "para", "indent": 4, "text": ["Move forward without drawing."], "extent": [4273, 4307]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["+"]}, " "], "extent": [4307, 4313], "body": [{"type": "para", "indent": 4, "text": ["Rotate right 90 degrees."], "extent": [4313, 4342]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-"]}, " "], "extent": [4342, 4348], "body": [{"type": "para", "indent": 4, "text": ["Rotate left 90 degrees."], "extent": [4348, 4376]}], "container": true}], "container": true}, {"type": "para", "indent": 0, "text": ["(In the actual L-system node, the angle of the ", {"type": "code", "text": ["+"]}, " and ", {"type": "code", "text": ["-"]}, " commands\nis configurable.)"], "extent": [4376, 4463]}, {"type": "para", "indent": 0, "text": ["With these simple rules, we can easily come up with a string that\ncauses the turtle to draw a shape such as the letter ", {"type": "q", "text": ["L"]}, ". For\nexample, assuming the turtle is initially facing upwards, we would\nuse the following string to create the letter ", {"type": "q", "text": ["L"]}, ":"], "extent": [4463, 4710]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/nodes/Houdini-03-1-090.jpg", "type": "img", "text": ""}], "extent": [4710, 4754]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Rewriting turtle command strings"], "extent": [4754, 4793], "body": [{"type": "para", "indent": 0, "text": ["By iteratively running a turtle command string through rewrite\nrules, you can generate surprisingly complex geometry. The power of\nself-reference in rewrite rules can create extremely intricate\nfigures."], "extent": [4793, 4998]}, {"type": "para", "indent": 0, "text": ["As a very simple example of self-reference, consider an L-system\nwith the initial string ", {"type": "code", "text": ["A"]}, " and the rule ", {"type": "code", "text": ["A=F+A"]}, ". The rule means\n", {"type": "q", "text": ["Wherever you see 'A', replace it with 'F+A'"]}, ". Because the\nreplacement will contain within it the trigger for the rule, each\ngeneration will cause the string to grow in a ", {"type": "em", "text": ["cascade effect"]}, ":"], "extent": [4998, 5318]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/nodes/Houdini-03-1-092.jpg", "type": "img", "text": ""}], "extent": [5318, 5362]}, {"type": "para", "indent": 0, "text": ["This generates a growing list of repeated ", {"type": "q", "text": ["move forward, then turn"]}, "\ncommands. With a turn angle less than 90 and a sufficient number of\ngenerations, this L-system will approximate an arc or circle. You\ncould use this behavior as the basis for curling a sheet of paper or\ncurling a scorpion\u2019s tail. Or, you could randomize the turn angle\nand create a squiggly line, which you could use as the basis for a\nbolt of lightning."], "extent": [5362, 5786]}, {"type": "para", "indent": 0, "text": ["(Be sure not to confuse the turtle command string ", {"type": "code", "text": ["F+A"]}, " with the\nmathematical statement ", {"type": "em", "text": ["F plus A"]}, ". In the context of L-systems, the\n", {"type": "code", "text": ["+"]}, " symbol means ", {"type": "q", "text": ["turn"]}, ", not ", {"type": "q", "text": ["add"]}, ".)"], "extent": [5786, 5957]}, {"type": "para", "indent": 0, "text": ["Another example: the following figure is called a ", {"type": "em", "text": ["quadratic Koch\nisland"]}, ". Beginning with these values:"], "extent": [5957, 6062]}, {"tag": "table", "attrs": {}, "type": "pxml", "indent": 0, "extent": [6062, 6070], "body": [{"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [6070, 6079], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [" Initial string (premise)"], "extent": [6079, 6117]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "extent": [6117, 6130], "body": [{"type": "para", "indent": 12, "text": [{"type": "code", "text": ["F-F-F-F"]}], "extent": [6130, 6152]}], "container": true}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [6152, 6161], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [" Rewrite rule"], "extent": [6161, 6187]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "extent": [6187, 6200], "body": [{"type": "para", "indent": 12, "text": [{"type": "code", "text": ["F = F-F+F+FF-F-F+F"]}], "extent": [6200, 6233]}], "container": true}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [6233, 6242], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [" Angle"], "extent": [6242, 6261]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "extent": [6261, 6274], "body": [{"type": "para", "indent": 12, "text": [{"type": "code", "text": ["90"]}], "extent": [6274, 6291]}], "container": true}], "container": true}], "container": true}, {"type": "para", "indent": 0, "text": ["\u2026the turtle generates the following for three generations:"], "extent": [6291, 6353]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/lsystems/island1.png", "type": "img", "text": ""}, "\n", {"scheme": "Image", "value": "/images/lsystems/island2.png", "type": "img", "text": ""}, "\n", {"scheme": "Image", "value": "/images/lsystems/island3.png", "type": "img", "text": ""}], "extent": [6353, 6465]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [6465, 6471], "body": [{"type": "para", "indent": 4, "text": ["The work required for Houdini to calculate successive\n    generations increases exponentially. If you try the island\n    example in Houdini, make sure the ", {"type": "ui", "text": ["Generations"]}, " parameter is\n    not greater than ", {"type": "code", "text": ["3"]}, "."], "extent": [6471, 6686]}], "container": true}], "container": true, "role": "item_group"}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [6686, 6691], "body": [{"type": "para", "indent": 4, "text": ["You can press ", {"keys": ["MMB"], "type": "keys", "text": null}, " on an L-system node to see the node\u2019s\n    current string. This can be very useful in debugging\n    rule substitution."], "extent": [6691, 6836]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Branches"], "extent": [6836, 6851], "body": [{"type": "para", "indent": 0, "text": ["The systems described so far generate a single continuous line. To\ndescribe things like trees, we need a way to create ", {"type": "em", "text": ["branches"]}, "."], "extent": [6851, 6984]}, {"type": "para", "indent": 0, "text": ["In L-systems, you create branches with the square brackets (", {"type": "code", "text": ["["]}, " and\n", {"type": "code", "text": ["]"]}, "). Any turtle commands you put inside square brackets are\nexecuted separately from the main string by a new turtle."], "extent": [6984, 7172]}, {"type": "para", "indent": 0, "text": ["For example, the turtle commands ", {"type": "code", "text": ["F [+F] F [+F] [-F]"]}, " is interpreted\nas:"], "extent": [7172, 7246]}, {"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["Go forward."], "extent": [7246, 7261]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Branch off a new turtle and have it turn right and then go\n  forward."], "extent": [7261, 7334]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Go forward."], "extent": [7334, 7349]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Branch off a new turtle and have it turn right and then go\n  forward."], "extent": [7349, 7422]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Branch off a new turtle and have it turn left and then go\n  forward."], "extent": [7422, 7494]}], "container": true}, {"type": "para", "indent": 0, "text": ["This creates the following figure:"], "extent": [7494, 7530]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/nodes/Houdini-03-1-095.jpg", "type": "img", "text": ""}], "extent": [7530, 7574]}, {"type": "para", "indent": 0, "text": ["Another example: the command string ", {"type": "code", "text": ["F [+F] [-F] F [+F] -FF"]}, " creates\nthe following figure:"], "extent": [7574, 7666]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/nodes/Houdini-03-1-096.jpg", "type": "img", "text": ""}], "extent": [7666, 7710]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["3D"], "extent": [7710, 7719], "body": [{"type": "para", "indent": 0, "text": ["The systems described so far generate flat geometry."], "extent": [7719, 7774]}, {"type": "para", "indent": 0, "text": ["To move the turtle in 3D, you use the , ", {"type": "code", "text": ["^"]}, " (pitch up), ", {"type": "code", "text": ["&"]}, " (pitch down),\n", {"type": "code", "text": ["\\"]}, " (roll clockwise), and ", {"type": "code", "text": ["/"]}, " (roll counter-clockwise) commands."], "extent": [7774, 7914]}, {"type": "para", "indent": 0, "text": ["For example, the initial premise ", {"type": "code", "text": ["FFFA"]}, " and the rule:"], "extent": [7914, 7969]}, {"lang": null, "type": "pre", "indent": 0, "text": ["\nA= \" [&FFFA] //// [&FFFA] //// [&FFFA]\n"], "extent": [7969, 8016]}, {"type": "para", "indent": 0, "text": ["Does the following:"], "extent": [8016, 8038]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["\""]}, " "], "role": "td", "extent": [8038, 8044], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Scale current branch length"], "extent": [8044, 8076]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["[&FFFA]"]}, " "], "role": "td", "extent": [8076, 8088], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Pitch down (", {"type": "code", "text": ["&"]}, ") and draw a branch, then insert a recursive copy (", {"type": "code", "text": ["A"]}, ").\n    (Repeated three times with rolls in between.)"], "extent": [8088, 8214]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "code", "text": ["////"]}, " "], "role": "td", "extent": [8214, 8223], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Roll counter-clockwise four times."], "extent": [8223, 8263]}]}], "divider": false}]}, {"type": "para", "indent": 0, "text": ["This creates the following 3D figure:"], "extent": [8263, 8302]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/lsystems/roll1.png", "type": "img", "text": ""}, "\n", {"scheme": "Image", "value": "/images/lsystems/roll2.png", "type": "img", "text": ""}, "\n", {"scheme": "Image", "value": "/images/lsystems/roll3.png", "type": "img", "text": ""}, "\n", {"scheme": "Image", "value": "/images/lsystems/roll4.png", "type": "img", "text": ""}, "\n", {"scheme": "Image", "value": "/images/lsystems/roll5.png", "type": "img", "text": ""}], "extent": [8302, 8478]}, {"type": "para", "indent": 0, "text": ["The rule creates three branches at every generation. The pitch down\ncommands (", {"type": "code", "text": ["&"]}, ") split the branches off from the vertical. The roll\ncommands (", {"type": "code", "text": ["/"]}, ") make the branches go out in different directions.\n(Note the ", {"type": "code", "text": ["A"]}, " at the end of each branch that ensures new copies of\nthe rule will grow from the ends of the branches.)"], "extent": [8478, 8796]}, {"type": "para", "indent": 0, "text": ["The ", {"type": "code", "text": ["\""]}, " command makes the ", {"type": "code", "text": ["F"]}, " commands half length in each\ngeneration, which makes the branches shrink further out."], "extent": [8796, 8913]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Use multiple L-system rules"], "extent": [8913, 8947], "body": [{"type": "para", "indent": 0, "text": ["In the previous section we used the rule\n", {"type": "code", "text": ["A= \" [&FFFA] //// [&FFFA] //// [&FFFA]"]}, "."], "extent": [8947, 9032]}, {"type": "para", "indent": 0, "text": ["Obviously this rule has redundancy. Since L-systems are about\nreplacing symbols with strings, we can simply replace the repeated\nstrings with a new symbol, and then create a new rule for that\nsymbol:"], "extent": [9032, 9233]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 1 "], "role": "td", "extent": [9233, 9242], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["A= \" [B] //// [B] //// [B]"]}], "extent": [9242, 9275]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 2 "], "role": "td", "extent": [9275, 9284], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["B= &FFFA"]}], "extent": [9284, 9300]}]}], "divider": false}]}, {"type": "para", "indent": 0, "text": ["Because the branches are now defined in one place, if you want to\nchange the branch instructions you only need to edit one string."], "extent": [9300, 9432]}, {"type": "para", "indent": 0, "text": [{"type": "strong", "text": ["Note that the two-rule system will take ", {"type": "em", "text": ["twice as many\ngenerations"]}, " to produce the same result"]}, ". This is because each\ngeneration performs one rule substitution."], "extent": [9432, 9595]}, {"type": "para", "indent": 0, "text": ["So, whereas the single rule ", {"type": "code", "text": ["A= \" [&FFFA] //// [&FFFA] //// [&FFFA]"]}, "\ngrows by expanding ", {"type": "code", "text": ["A"]}, " at each generation, the dual rules of\n", {"type": "code", "text": ["A= \" [B] //// [B] //// [B]"]}, " and ", {"type": "code", "text": ["B= &FFFA"]}, " work by alternating\nbetween replacing ", {"type": "code", "text": ["A"]}, " with ", {"type": "code", "text": ["\" [B] //// [B] //// [B]"]}, " and replacing\n", {"type": "code", "text": ["B"]}, " with ", {"type": "code", "text": ["&FFFA"]}, "."], "extent": [9595, 9876]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Turtle command reference"], "extent": [9876, 9907], "body": [{"type": "para", "indent": 0, "text": ["Normally turtle symbols use the current length/angle/thickness etc. to\ndetermine their effect. You can provide explicit arguments in brackets\nto override the normal values used by the turtle command."], "extent": [9907, 10109]}, {"type": "para", "indent": 0, "text": ["The following list shows the bracketed arguments. Remember that you can\nsimply use the single-character command without the arguments and\nHoudini will simply use the normal values."], "extent": [10109, 10291]}, {"type": "para", "indent": 0, "text": ["See ", {"scheme": null, "value": "#locals", "type": "link", "text": ["local functions and variables"], "fullpath": "/nodes/sop/lsystem#locals", "fragment": "#locals"}, " below for what functions and\nvariables you can use in argument expressions inside the brackets."], "extent": [10291, 10432]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["F(l,w,s,d)"]}, " "], "extent": [10432, 10447], "body": [{"type": "para", "indent": 4, "text": ["Move forward (creating geometry) distance ", {"type": "var", "text": ["l"]}, " of width ", {"type": "var", "text": ["w"]}, "\n    using ", {"type": "var", "text": ["s"]}, " cross sections of ", {"type": "var", "text": ["d"]}, " divisions each."], "extent": [10447, 10570]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["H(l,w,s,d)"]}, " "], "extent": [10570, 10585], "body": [{"type": "para", "indent": 4, "text": ["Move forward half the length (creating geometry) distance ", {"type": "var", "text": ["l"]}, "\n    of width ", {"type": "var", "text": ["w"]}, " using ", {"type": "var", "text": ["s"]}, " cross sections of ", {"type": "var", "text": ["d"]}, " divisions\n    each."], "extent": [10585, 10728]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["G(l,w,s,d)"]}, " "], "extent": [10728, 10743], "body": [{"type": "para", "indent": 4, "text": ["Move forward but don\u2019t record a vertex distance ", {"type": "var", "text": ["l"]}, " of width\n    ", {"type": "var", "text": ["w"]}, " using ", {"type": "var", "text": ["s"]}, " cross sections of ", {"type": "var", "text": ["d"]}, " divisions each."], "extent": [10743, 10872]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["f(l,w,s,d)"]}, " "], "extent": [10872, 10887], "body": [{"type": "para", "indent": 4, "text": ["Move forward (no geometry created) distance ", {"type": "var", "text": ["l"]}, " of width ", {"type": "var", "text": ["w"]}, "\n    using ", {"type": "var", "text": ["s"]}, " cross sections of ", {"type": "var", "text": ["d"]}, " divisions each."], "extent": [10887, 11012]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["h(l,w,s,d)"]}, " "], "extent": [11012, 11027], "body": [{"type": "para", "indent": 4, "text": ["Move forward a half length (no geometry created) distance ", {"type": "var", "text": ["l"]}, "\n    of width ", {"type": "var", "text": ["w"]}, " using ", {"type": "var", "text": ["s"]}, " cross sections of ", {"type": "var", "text": ["d"]}, " divisions\n    each."], "extent": [11027, 11170]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["J(s,x,a,b,c)"]}, ", ", {"type": "code", "text": ["K(s,x,a,b,c)"]}, ", ", {"type": "code", "text": ["M(s,x,a,b,c)"]}, " "], "extent": [11170, 11219], "body": [{"type": "para", "indent": 4, "text": ["Copy geometry from leaf input J, K, or M at the turtle\u2019s\n    position after scaling and reorienting the geometry. The\n    geometry is scaled by the s parameter (default Step Size) and\n    stamped with the values ", {"type": "var", "text": ["a"]}, " through ", {"type": "var", "text": ["c"]}, " (default no\n    stamping). Stamping occurs if the given parameter is present and\n    the relevant Leaf parameter is set. The ", {"type": "var", "text": ["x"]}, " parameter is not\n    used and should be set to 0. Note that point vector attributes in the\n    leaf inputs will be affected by the turtle movements. "], "extent": [11219, 11736]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["T(g)"]}, " "], "extent": [11736, 11745], "body": [{"type": "para", "indent": 4, "text": ["Apply tropism vector (gravity). This angles the turtle towards\n    the negative Y axis. The amount of change is governed by ", {"type": "var", "text": ["g"]}, ".\n    The default change is to use the Gravity parameter."], "extent": [11745, 11936]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["+(a)"]}, " "], "extent": [11936, 11945], "body": [{"type": "para", "indent": 4, "text": ["Turn right ", {"type": "var", "text": ["a"]}, " degrees. Default Angle."], "extent": [11945, 11990]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["-(a)"]}, " "], "extent": [11990, 11999], "body": [{"type": "para", "indent": 4, "text": ["Turn left ", {"type": "var", "text": ["a"]}, " degrees (minus sign). Default Angle."], "extent": [11999, 12056]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["&(a)"]}, " "], "extent": [12056, 12065], "body": [{"type": "para", "indent": 4, "text": ["Pitch down ", {"type": "var", "text": ["a"]}, " degrees. Default Angle."], "extent": [12065, 12110]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["^(a)"]}, " "], "extent": [12110, 12119], "body": [{"type": "para", "indent": 4, "text": ["Pitch up ", {"type": "var", "text": ["a"]}, " degrees. Default Angle."], "extent": [12119, 12162]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["\\\\(a)"]}, " "], "extent": [12162, 12172], "body": [{"type": "para", "indent": 4, "text": ["Roll clockwise ", {"type": "var", "text": ["a"]}, " degrees. Default Angle."], "extent": [12172, 12221]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["/(a)"]}, " "], "extent": [12221, 12230], "body": [{"type": "para", "indent": 4, "text": ["Roll counter-clockwise ", {"type": "var", "text": ["a"]}, " degrees. Default Angle."], "extent": [12230, 12287]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["|"]}, " "], "extent": [12287, 12293], "body": [{"type": "para", "indent": 4, "text": ["Turn 180 degrees"], "extent": [12293, 12314]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["*"]}, " "], "extent": [12314, 12320], "body": [{"type": "para", "indent": 4, "text": ["Roll 180 degrees"], "extent": [12320, 12341]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["~(a)"]}, " "], "extent": [12341, 12350], "body": [{"type": "para", "indent": 4, "text": ["Pitch / Roll / Turn random amount up to ", {"type": "var", "text": ["a"]}, " degrees. Default\n    180."], "extent": [12350, 12426]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["\"(s)"]}, " "], "extent": [12426, 12435], "body": [{"type": "para", "indent": 4, "text": ["Multiply current length by s. Default Step Size Scale."], "extent": [12435, 12494]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["!(s)"]}, " "], "extent": [12494, 12503], "body": [{"type": "para", "indent": 4, "text": ["Multiply current thickness by s. Default Thickness Scale."], "extent": [12503, 12565]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": [";(s)"]}, " "], "extent": [12565, 12574], "body": [{"type": "para", "indent": 4, "text": ["Multiply current angle by s. Default Angle Scale."], "extent": [12574, 12628]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["_(s)"]}, " "], "extent": [12628, 12637], "body": [{"type": "para", "indent": 4, "text": ["Divide current length (underscore) by s. Default Step Size\n    Scale."], "extent": [12637, 12711]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["?(s)"]}, " "], "extent": [12711, 12720], "body": [{"type": "para", "indent": 4, "text": ["Divides current width by s. Default Thickness Scale."], "extent": [12720, 12777]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["@(s)"]}, " "], "extent": [12777, 12786], "body": [{"type": "para", "indent": 4, "text": ["Divide current angle by s. Default Angle Scale."], "extent": [12786, 12838]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["'(u)"]}, " "], "extent": [12838, 12847], "body": [{"type": "para", "indent": 4, "text": ["Increment color index U by ", {"type": "var", "text": ["u"]}, ". Default ", {"type": "ui", "text": ["UV Increment"]}, "'s\n    first parameter."], "extent": [12847, 12933]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["#(v)"]}, " "], "extent": [12933, 12942], "body": [{"type": "para", "indent": 4, "text": ["Increment color index V by ", {"type": "var", "text": ["v"]}, ". Default ", {"type": "ui", "text": ["UV Increment"]}, "'s\n    second parameter."], "extent": [12942, 13029]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["%"]}, " "], "extent": [13029, 13035], "body": [{"type": "para", "indent": 4, "text": ["Cut off remainder of branch"], "extent": [13035, 13067]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["$(x,y,z)"]}, " "], "extent": [13067, 13080], "body": [{"type": "para", "indent": 4, "text": ["Rotates the turtle so the up vector is (0,1,0). Points the\n    turtle in the direction of the point ", {"type": "code", "text": ["(x,y,z)"]}, ". Default behavior\n    is only to orient and not to change the direction."], "extent": [13080, 13267]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["["]}, " "], "extent": [13267, 13273], "body": [{"type": "para", "indent": 4, "text": ["Push turtle state (start a branch)"], "extent": [13273, 13312]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["]"]}, " "], "extent": [13312, 13318], "body": [{"type": "para", "indent": 4, "text": ["Pop turtle state (end a branch)"], "extent": [13318, 13354]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["{"]}, " "], "extent": [13354, 13360], "body": [{"type": "para", "indent": 4, "text": ["Start a polygon"], "extent": [13360, 13380]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["."]}, " "], "extent": [13380, 13386], "body": [{"type": "para", "indent": 4, "text": ["Make a polygon vertex"], "extent": [13386, 13412]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["}"]}, " "], "extent": [13412, 13418], "body": [{"type": "para", "indent": 4, "text": ["End a polygon"], "extent": [13418, 13436]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["g(i)"]}, " "], "extent": [13436, 13445], "body": [{"type": "para", "indent": 4, "text": ["Create a new primitive group to which subsequent geometry is\n    added. The group name is the Group Prefix followed by the number\n    ", {"type": "var", "text": ["i"]}, ". The default if no parameter is given is to create a group\n    with the current group number and then increment the current\n    group number."], "extent": [13445, 13731]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["a(attrib, v1, v2, v3)"]}, " "], "extent": [13731, 13757], "body": [{"type": "para", "indent": 4, "text": ["This creates a point attribute of the name attrib. It is then\n    set to the value ", {"type": "code", "text": ["v1, v2, v3"]}, " for the remainder of the points on\n    this branch, or until another a command resets it. ", {"type": "var", "text": ["v2"]}, " and\n    ", {"type": "var", "text": ["v3"]}, " are optional. If they are not present, an attribute of\n    fewer floats will be created. The created attribute is always of\n    float type and with zero defaults. For example, the rule\n    ", {"type": "code", "text": ["a(\"Cd\", 1, 0, 1)"]}, " added to the start of the premise will make\n    the L-system a nice pugnacious purple."], "extent": [13757, 14266]}], "container": true}], "container": true}]}, {"level": 2, "id": "locals", "container": true, "type": "h", "indent": 0, "text": ["Local functions and variables"], "extent": [14266, 14311], "body": [{"type": "para", "indent": 0, "text": ["These functions and variables are available in arguments to turtle commands such as ", {"type": "code", "text": ["F()"]}, ". These are separate from ", {"scheme": null, "value": "/expressions/", "type": "link", "text": ["parameter expression functions"], "fullpath": "/expressions/index"}, " and node local variables."], "extent": [14311, 14501]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["acos(v)"]}], "extent": [14501, 14512], "body": [{"type": "para", "indent": 4, "text": ["Arc cosine, the inverse of cosine. Returns the result in degrees."], "extent": [14512, 14583]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["asin(v)"]}], "extent": [14583, 14594], "body": [{"type": "para", "indent": 4, "text": ["Arc sine, the inverse of sine. Returns the result in degrees."], "extent": [14594, 14661]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["cos(angle)"]}], "extent": [14661, 14675], "body": [{"type": "para", "indent": 4, "text": ["Cosine. Takes an angle in degrees."], "extent": [14675, 14715]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["sin(angle)"]}], "extent": [14715, 14729], "body": [{"type": "para", "indent": 4, "text": ["Sine. Takes an angle in degrees."], "extent": [14729, 14767]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["chan(idx)"]}], "extent": [14767, 14780], "body": [{"type": "para", "indent": 4, "text": ["Returns the value of an animated spare parameter on this node at the current time."], "extent": [14780, 14868]}, {"type": "para", "indent": 4, "text": ["You can ", {"scheme": null, "value": "/network/spare", "type": "link", "text": ["add a spare parameter"], "fullpath": "/network/spare"}, " to the node, keyframe it, and then use the animated values to change the Lsystem over time."], "extent": [14868, 15012]}, {"type": "para", "indent": 4, "text": ["Specify the name of the spare parameter using the ", {"type": "ui", "text": ["LSystem channel prefix"]}, " parameter."], "extent": [15012, 15105]}, {"type": "para", "indent": 4, "text": ["For example, if you add a spare parameter tuple named ", {"type": "code", "text": ["spare"]}, ", set the ", {"type": "ui", "text": ["Lsystem channel prefix"]}, " to ", {"type": "code", "text": ["spare"]}, ". Then, to reference the value of ", {"type": "code", "text": ["spare"]}, "'s first component (at the current time), use ", {"type": "code", "text": ["chan(0)"]}, " (this evaluates the channel named ", {"type": "code", "text": ["spare0"]}, "). To access the second component, use ", {"type": "code", "text": ["chan(1)"]}, ", for the third component use ", {"type": "code", "text": ["chan(2)"]}, ", and so on."], "extent": [15105, 15457]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["min(a, b)"]}], "extent": [15457, 15470], "body": [{"type": "para", "indent": 4, "text": ["Returns the lower of a or b."], "extent": [15470, 15504]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["max(a, b)"]}], "extent": [15504, 15517], "body": [{"type": "para", "indent": 4, "text": ["Returns the higher of a or b."], "extent": [15517, 15552]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["in(x, y, z)"]}], "extent": [15552, 15567], "body": [{"type": "para", "indent": 4, "text": ["This determines if the point (x, y, z) is inside the Meta Test Input."], "extent": [15567, 15642]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["pic(x, y, plane)"]}], "extent": [15642, 15662], "body": [{"type": "para", "indent": 4, "text": ["This evaluates the LSystem Picture at coordinates ", {"type": "code", "text": ["(x, y)"]}, ". These should be in the range 0..1."], "extent": [15662, 15762]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["plane"]}], "extent": [15762, 15775], "body": [{"type": "para", "indent": 8, "text": ["Which image channel to get. ", {"type": "code", "text": ["0"]}, " = luminance, ", {"type": "code", "text": ["1"]}, " = red, ", {"type": "code", "text": ["2"]}, " = green, and ", {"type": "code", "text": ["3"]}, " = blue."], "extent": [15775, 15873]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Returns a value from 0..1."], "extent": [15873, 15905]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["rand(seed)"]}], "extent": [15905, 15919], "body": [{"type": "para", "indent": 4, "text": ["Same as the ", {"scheme": "Exp", "value": "/expressions/rand", "type": "link", "text": "", "fallback_text": "rand()", "fullpath": "/expressions/rand"}, " expression function.\n    You can get a quick random number using ", {"type": "code", "text": ["rand(i)"]}, "."], "extent": [15919, 16023]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["a"]}], "extent": [16023, 16028], "body": [{"type": "para", "indent": 4, "text": ["The LSystem angle parameter."], "extent": [16028, 16062]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["b"]}], "extent": [16062, 16067], "body": [{"type": "para", "indent": 4, "text": ["The LSystem b parameter."], "extent": [16067, 16097]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["c"]}], "extent": [16097, 16102], "body": [{"type": "para", "indent": 4, "text": ["The LSystem c parameter."], "extent": [16102, 16132]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["d"]}], "extent": [16132, 16137], "body": [{"type": "para", "indent": 4, "text": ["The LSystem d parameter."], "extent": [16137, 16167]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["g"]}], "extent": [16167, 16172], "body": [{"type": "para", "indent": 4, "text": ["Initially 0. After that it is set to the age of the current rule."], "extent": [16172, 16243]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["i"]}], "extent": [16243, 16248], "body": [{"type": "para", "indent": 4, "text": ["The offset into the current lsystem string where the rule is being applied."], "extent": [16248, 16329]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["t"]}], "extent": [16329, 16334], "body": [{"type": "para", "indent": 4, "text": ["Initially 0. After that it is set to the iteration count."], "extent": [16334, 16397]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["x"]}, ", ", {"type": "code", "text": ["y"]}, ", ", {"type": "code", "text": ["z"]}], "extent": [16397, 16412], "body": [{"type": "para", "indent": 4, "text": ["The current turtle position in space."], "extent": [16412, 16455]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["A"]}], "extent": [16455, 16460], "body": [{"type": "para", "indent": 4, "text": ["The arc length from the root of the tree to the current point."], "extent": [16460, 16528]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["L"]}], "extent": [16528, 16533], "body": [{"type": "para", "indent": 4, "text": ["The current length increment at the point."], "extent": [16533, 16581]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["T"]}], "extent": [16581, 16586], "body": [{"type": "para", "indent": 4, "text": ["The LSystem gravity parameter."], "extent": [16586, 16622]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["U"]}], "extent": [16622, 16627], "body": [{"type": "para", "indent": 4, "text": ["The color map U value."], "extent": [16627, 16655]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["V"]}], "extent": [16655, 16660], "body": [{"type": "para", "indent": 4, "text": ["The color map V value."], "extent": [16660, 16688]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["W"]}], "extent": [16688, 16693], "body": [{"type": "para", "indent": 4, "text": ["The current width at the current point."], "extent": [16693, 16739]}], "container": true}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Use modeled geometry in an L-system"], "extent": [16739, 16781], "body": [{"type": "para", "indent": 0, "text": ["Houdini lets you create a copy of some geometry at the turtle\u2019s location\nusing certain commands. You can use this to create leaves and flowers on\nan L-system shrub, for example."], "extent": [16781, 16961]}, {"type": "ord_group", "body": [{"blevel": 3, "type": "ord", "indent": 0, "text": [{"scheme": null, "value": "/ref/panes/network", "type": "link", "text": ["Connect"], "fullpath": "/ref/panes/network"}, "  the output of the geometry you want to\n  stamp to one of the L-system node\u2019s inputs."], "extent": [16961, 17080]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Use the corresponding command (", {"type": "code", "text": ["J"]}, ", ", {"type": "code", "text": ["K"]}, ", or ", {"type": "code", "text": ["M"]}, ") in a turtle\n  command string to insert the geometry."], "extent": [17080, 17185]}], "container": true}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Input "], "role": "th", "extent": [17185, 17194], "container": true}, {"type": "cell", "indent": 4, "text": ["Turtle command "], "role": "th", "extent": [17194, 17216]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["1 "], "role": "td", "extent": [17216, 17220], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["J"]}], "extent": [17220, 17228]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["2 "], "role": "td", "extent": [17228, 17232], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["K"]}], "extent": [17232, 17240]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["3 "], "role": "td", "extent": [17240, 17244], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["M"]}], "extent": [17244, 17253]}]}], "divider": false}]}, {"type": "para", "indent": 0, "text": ["If you connect a leaf surface to the L-systems input 1 and a flower\nto input 2, you can use the following to create a bush with leaves\nand flowers:"], "extent": [17253, 17402]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Premise "], "role": "td", "extent": [17402, 17412], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 5, "text": [{"type": "code", "text": ["A"]}], "extent": [17412, 17421]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 1 "], "role": "td", "extent": [17421, 17430], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["A= [&FA [fK]] ///// [&FA [fJ]] /////// [&FA [fJ]]"]}], "extent": [17430, 17486]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 2 "], "role": "td", "extent": [17486, 17495], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["F= S/////"]}], "extent": [17495, 17511]}, {"type": "cell", "indent": 1, "text": ["Rule 3 "], "role": "td", "extent": [17511, 17521], "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["S= F"]}], "extent": [17521, 17533]}], "container": true}]}], "divider": false}]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/nodes/Houdini-03-1-104.jpg", "type": "img", "text": ""}], "extent": [17533, 17577]}, {"type": "para", "indent": 0, "text": ["Rule 1 prefaces the ", {"type": "code", "text": ["K"]}, " and ", {"type": "code", "text": ["J"]}, " commands with ", {"type": "code", "text": ["f"]}, " (move forward\nwithout drawing) to offset the geometry a little bit. Otherwise, the\nleaf would be attached at its center, rather than the edge."], "extent": [17577, 17772]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Symbol variables"], "extent": [17772, 17795], "body": [{"type": "para", "indent": 0, "text": ["Each symbol can have up to five user-defined variables associated\nwith it. You can reference or assign these variables in expressions.\nVariables in the matched symbol are instanced while variables in the\nreplacement are assigned."], "extent": [17795, 18027]}, {"type": "para", "indent": 0, "text": ["For example, the rule ", {"type": "code", "text": ["A(i, j)=A(i+1, j-1)"]}, " will replace each ", {"type": "code", "text": ["A"]}, "\nwith a new ", {"type": "code", "text": ["A"]}, " in which the first parameter (", {"type": "code", "text": ["i"]}, ") has been\nincremented and the second parameter (", {"type": "code", "text": ["j"]}, ") decremented."], "extent": [18027, 18209]}, {"type": "para", "indent": 0, "text": ["Parameters assigned to geometric symbols (for example, ", {"type": "code", "text": ["F"]}, ", ", {"type": "code", "text": ["+"]}, ", and\n", {"type": "code", "text": ["!"]}, ") are interpreted geometrically. For example, the rule: ", {"type": "code", "text": ["F(i, j)\n= F(0.5*i, 2*j)"]}, " will again replace each F with a new F containing\nmodified parameters. In addition to this, the new F will now be\ndrawn at half the length and twice the width."], "extent": [18209, 18524]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [18524, 18529], "body": [{"type": "para", "indent": 4, "text": ["The variables in the predecessor can also be referenced by the\n    condition or probability portions of the rule. For example, the\n    rule ", {"type": "code", "text": ["A(i):i<5 = A(i+1) A(i+1)"]}, " will double each A a maximum of\n    five times (assuming a premise of ", {"type": "code", "text": ["A(0)"]}, ")."], "extent": [18529, 18780]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Control length over time"], "extent": [18780, 18811], "body": [{"type": "para", "indent": 0, "text": ["To create an L-system which goes forward ", {"type": "var", "text": ["x"]}, " percent less on each\niteration, you need to start your Premise with a value, and then in\na rule multiply that value by the percentage you want to remain."], "extent": [18811, 19014]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Premise "], "role": "td", "extent": [19014, 19024], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["A(1)"]}], "extent": [19024, 19035]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule "], "role": "td", "extent": [19035, 19042], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["A(i)= F(i)A(i*0.5)"]}], "extent": [19042, 19076]}]}], "divider": false}]}, {"type": "para", "indent": 0, "text": ["This way ", {"type": "var", "text": ["i"]}, " is scaled before ", {"type": "var", "text": ["A"]}, " is re-evaluated. The important\npart is the premise: you need to start with a value to be able to\nscale it."], "extent": [19076, 19223]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Stamp variables onto input geometry"], "extent": [19223, 19265], "body": [{"type": "para", "indent": 0, "text": ["The third argument to the ", {"type": "code", "text": ["J"]}, "/", {"type": "code", "text": ["K"]}, "/", {"type": "code", "text": ["M"]}, " commands is passed to the\nconnected geometry."], "extent": [19265, 19351]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [19351, 19356], "body": [{"type": "para", "indent": 4, "text": ["You can use this trick to get around the limitation of only\n    three geometry inputs on a L-system."], "extent": [19356, 19462]}, {"type": "para", "indent": 4, "text": ["Create all the different models you want (say, 20 different\n    types of leaves) and connect them to a ", {"scheme": "Node", "value": "/nodes/sop/switch", "type": "link", "text": ["Switch\n    node"], "fullpath": "/nodes/sop/switch"}, ". Set the switch node\u2019s ", {"type": "ui", "text": ["Select input"]}, "\n    parameter to ", {"type": "code", "text": ["stamp(\"/path/to/lsystem\", \"lsys\",0)"]}, "."], "extent": [19462, 19700]}, {"type": "para", "indent": 4, "text": ["Connect the switch node to the J input of an L-system node. Now\n    you can insert any of the 20 leaf types using\n    ", {"type": "code", "text": ["J(L,0,", {"type": "var", "text": ["leaf_number"]}, ")"]}, "."], "extent": [19700, 19849]}], "container": true}], "container": true, "role": "item_group"}, {"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/sop/circle", "type": "link", "text": ["Circle node"], "fullpath": "/nodes/sop/circle"}, " and set the number\n  of divisions to ", {"type": "code", "text": ["stamp(\"/path/to/lsystem\", \"lsys\", 3)"]}, "."], "extent": [19849, 19968], "body": [{"type": "para", "indent": 2, "text": ["Because the default number of divisions is 3 (the second\n  argument in the expression), this creates a triangle."], "extent": [19968, 20084]}], "container": true}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Connect the output of the circle node to the J input of an\n  L-system node."], "extent": [20084, 20163]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["In the L-system rules, you can use ", {"type": "code", "text": ["J(L,0,", {"type": "var", "text": ["number"]}, ")"]}, " to\n  pass ", {"type": "var", "text": ["number"]}, " to the J geometry. For example, ", {"type": "code", "text": ["J(L,0,4)"]}, "\n  produces a square, ", {"type": "code", "text": ["J(L,0,5)"]}, " produces a pentagram."], "extent": [20163, 20340]}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Create groups within L-systems"], "extent": [20340, 20377], "body": [{"type": "para", "indent": 0, "text": ["The ", {"type": "code", "text": ["g"]}, " command puts all geometry currently being built into a\ngroup."], "extent": [20377, 20449]}, {"type": "para", "indent": 0, "text": ["The group name is composed of a prefix set on the ", {"type": "ui", "text": ["Funcs"]}, " tab and\na number. Default prefix is ", {"type": "code", "text": ["lsys"]}, ", producing group names like\n", {"type": "q", "text": ["lsys1"]}, ". You can specify the number as an argument to the ", {"type": "code", "text": ["g"]}, "\ncommand."], "extent": [20449, 20652]}, {"type": "para", "indent": 0, "text": ["For example, ", {"type": "code", "text": ["g[F]"]}, " puts geometry from the ", {"type": "code", "text": ["F"]}, " into a group (named\nusing ). Otherwise, the default index is incremented appropriately."], "extent": [20652, 20788]}, {"type": "para", "indent": 0, "text": ["The current group is associated with the branch, so you can do\nthings like ", {"type": "code", "text": ["gF [ gFF ] F"]}, " to put the first and last ", {"type": "code", "text": ["F"]}, " into group\n0, and the middle (branched) ", {"type": "code", "text": ["FF"]}, " into group 1."], "extent": [20788, 20968]}, {"type": "para", "indent": 0, "text": ["To exclude a branch from its parent\u2019s group, use ", {"type": "code", "text": ["g(-1)"]}, "."], "extent": [20968, 21028]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Edge rewriting"], "extent": [21028, 21049], "body": [{"type": "para", "indent": 0, "text": ["In ", {"type": "em", "text": ["The Algorithmic Beauty of Plants"]}, ", many examples use a technique\ncalled ", {"type": "em", "text": ["edge rewriting"]}, " which involve left and right subscripts. A\ntypical example is:"], "extent": [21049, 21207]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Generations "], "role": "td", "extent": [21207, 21221], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["10"]}], "extent": [21221, 21230]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Angle "], "role": "td", "extent": [21230, 21238], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["90"]}], "extent": [21238, 21247]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Premise "], "role": "td", "extent": [21247, 21257], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["F(l)"]}], "extent": [21257, 21268]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 1 "], "role": "td", "extent": [21268, 21277], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["F(l) = F(l)+F(r)+"]}], "extent": [21277, 21301]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 2 "], "role": "td", "extent": [21301, 21310], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["F(r)=-F(l)-F(r)"]}], "extent": [21310, 21341]}]}], "divider": false}]}, {"type": "para", "indent": 0, "text": ["However, Houdini doesn\u2019t support the ", {"type": "code", "text": ["F(l)"]}, " and ", {"type": "code", "text": ["F(r)"]}, " syntax. You\ncan modify the rules to use symbol variables instead."], "extent": [21341, 21463]}, {"type": "para", "indent": 0, "text": ["For the F turtle symbol, the first four parameters are ", {"type": "var", "text": ["length"]}, ",\n", {"type": "var", "text": ["width"]}, ", ", {"type": "var", "text": ["tubesides"]}, ", and ", {"type": "var", "text": ["tubesegs"]}, ". The last parameter is\nuser-definable. We can define this last parameter so 0 is left, and\n1 is right:"], "extent": [21463, 21677]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Generations "], "role": "td", "extent": [21677, 21691], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["10"]}], "extent": [21691, 21700]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Angle "], "role": "td", "extent": [21700, 21708], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["90"]}], "extent": [21708, 21717]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Premise "], "role": "td", "extent": [21717, 21727], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["F(1,1,3,3,0)"]}], "extent": [21727, 21746]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 1 "], "role": "td", "extent": [21746, 21755], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["F(i,j,k,l,m) :m=0 = F(i,j,k,l,0)+F(i,j,k,l,1)+"]}], "extent": [21755, 21808]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 2 "], "role": "td", "extent": [21808, 21817], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["F(i,j,k,l,m) :m=1 =-F(i,j,k,l,0)-F(i,j,k,l,1)"]}], "extent": [21817, 21870]}]}], "divider": false}]}, {"type": "para", "indent": 0, "text": ["After two generations this produces: ", {"type": "code", "text": ["Fl+Fr+-Fl-Fr"]}, " There should not\nbe any difference between this final string and: ", {"type": "code", "text": ["F+F+-F-F"]}], "extent": [21870, 22000]}, {"type": "para", "indent": 0, "text": ["Another approach is to use two new variables, and use a conditional\nstatement on the final step to convert them to F:"], "extent": [22000, 22119]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["b "], "role": "td", "extent": [22119, 22123], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["ch(\"generations\")"]}], "extent": [22123, 22147]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Premise "], "role": "td", "extent": [22147, 22157], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["l"]}], "extent": [22157, 22165]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 1 "], "role": "td", "extent": [22165, 22174], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["l:t<b=l+r+"]}], "extent": [22174, 22191]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 2 "], "role": "td", "extent": [22191, 22200], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["r:t<b=-l-r"]}], "extent": [22200, 22217]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 3 "], "role": "td", "extent": [22217, 22226], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["l=F"]}], "extent": [22226, 22236]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 4 "], "role": "td", "extent": [22236, 22245], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["r=F"]}], "extent": [22245, 22256]}]}], "divider": false}]}, {"type": "para", "indent": 0, "text": ["The produces the following output:"], "extent": [22256, 22292]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Generation "], "role": "th", "extent": [22292, 22306], "container": true}, {"type": "cell", "indent": 4, "text": ["String "], "role": "th", "extent": [22306, 22320]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["0 "], "role": "td", "extent": [22320, 22324], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["l"]}], "extent": [22324, 22332]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["1 "], "role": "td", "extent": [22332, 22336], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["F"]}], "extent": [22336, 22344]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["2 "], "role": "td", "extent": [22344, 22348], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["F+F+"]}], "extent": [22348, 22359]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["3 "], "role": "td", "extent": [22359, 22363], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["F+F++-F-F+"]}], "extent": [22363, 22382]}]}], "divider": false}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Limit L-system growth inside a shape"], "extent": [22382, 22425], "body": [{"type": "para", "indent": 0, "text": ["The L-system node\u2019s meta-test input lets you generate rules that will\ncause the system to stop when it reaches the edges of a defined shape,\nlike a topiary hedge."], "extent": [22425, 22590]}, {"tag": "steps", "attrs": {}, "type": "pxml", "indent": 0, "extent": [22616, 22624], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a metaball or merged metaballs that define the volume in\n      which the L-system can grow."], "extent": [22624, 22730]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Connect the metaball node\u2019s output to the Meta-test input of the\n      L-system node."], "extent": [22730, 22823]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Use a conditional statement (", {"type": "code", "text": [":"]}, ") with an ", {"type": "q", "text": ["in"]}, " test. For example:"], "extent": [22823, 22896]}], "container": true}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Example"], "extent": [22896, 22910], "body": [{"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Premise "], "role": "td", "extent": [22910, 22921], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["FA"]}], "extent": [22921, 22931]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 1 "], "role": "td", "extent": [22931, 22940], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["A: in(x,y,z) = F [+FA] -FA : 80"]}], "extent": [22940, 22979]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Rule 2 "], "role": "td", "extent": [22979, 22988], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["A: ! in(x,y,z) = A%"]}], "extent": [22988, 23015]}]}], "divider": false}]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["This L-system checks to see if the next iteration of growth will\n  be within the Meta-test bounds, and if not it prunes the current\n  branch."], "extent": [23015, 23160]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Rule 1 executes 80% of the time when the branch is within the\n  meta-test boundary."], "extent": [23160, 23247]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Rule 2 executes when the branch is ", {"type": "em", "text": ["not"]}, " within the meta-test\n  boundary (the ", {"type": "code", "text": ["!"]}, " negates the ", {"type": "code", "text": ["in(x,y,z)"]}, " condition). The ", {"type": "code", "text": ["%"]}, "\n  command ends the branch."], "extent": [23247, 23403]}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [23403, 23409], "body": [{"type": "para", "indent": 4, "text": ["If the L-system start point is not inside the metaball envelope, it\n    will stay dormant. Once you have set up your L-system and metaballs,\n    make sure you transform them together so the L-system is not\n    accidentally moved outside the metaball."], "extent": [23409, 23666]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Arrange geometry instances with L-systems"], "extent": [23666, 23714], "body": [{"type": "para", "indent": 0, "text": ["L-systems can be a powerful tool for arranging modeled geometry. By\nusing an L-system as the template input to a ", {"scheme": "Node", "value": "/nodes/sop/copy", "type": "link", "text": ["Copy SOP"], "fullpath": "/nodes/sop/copy"}, ",\nyou can place a copy of a model at every point of the L-system."], "extent": [23714, 23919]}, {"type": "para", "indent": 0, "text": ["For example, you could use the ", {"type": "q", "text": ["arc approximation"]}, " L-system from the\n", {"scheme": null, "value": "#basics", "type": "link", "text": ["L-system basics"], "fullpath": "/nodes/sop/lsystem#basics", "fragment": "#basics"}, "  (premise=", {"type": "code", "text": ["A"]}, ", rule=", {"type": "code", "text": ["A=F+A"]}, ") to arrange\na series of spheres in an arc or circle. This gives you parametric\ncontrol of the bending and spacing of the arc of spheres."], "extent": [23919, 24181]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Further reading"], "extent": [24181, 24203], "body": [{"type": "para", "indent": 0, "text": ["If you have any serious interests in creating L-systems, you should\nobtain the book:"], "extent": [24203, 24290]}, {"type": "para", "indent": 0, "text": [{"type": "em", "text": ["The Algorithmic Beauty of Plants"]}, " by Przemyslaw Prusinkiewicz and\nAristid Lindenmayer (1996, Springer-Verlag, New York. Phone\n212.460.1500. ISBN: 0-387-94676-4)"], "extent": [24290, 24453]}, {"type": "para", "indent": 0, "text": ["It is the definitive work on the subject. It contains many L-systems\nexamples along with ideas and theories about modeling realistic\nplant growth."], "extent": [24453, 24602]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Speed up calculations"], "extent": [24602, 24630], "body": [{"type": "para", "indent": 0, "text": ["Modeling something like a whole tree as single large L-System may cause collision resolution calculations to be single threaded. The wire solver will look for pieces of wire objects that can be solved independently and divide the work among the available cores. One large connected L-System means the work cannot be divided into smaller work units."], "extent": [24630, 24981]}, {"type": "para", "indent": 0, "text": ["Try using a ", {"scheme": "Node", "value": "/nodes/dop/wireglueconstraint", "type": "link", "text": ["Wire Glue Constraint DOP"], "fullpath": "/nodes/dop/wireglueconstraint"}, " to constrain a point on the L-System where the branches join together near the root of the tree (constrain the point to its world space position). This will cause the wire solver to see the separate branches as distinct pieces that can be solved independently. Since the constrained point will not move, any motion on one of the branches will not affect the other branches. If possible, reducing the number of points in the wire object should also speed up the calculations. "], "extent": [24981, 25526]}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [25526, 25538], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Geometry"], "extent": [25538, 25554], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Type"], "extent": [25554, 25561], "body": [{"type": "para", "indent": 4, "text": ["The type of geometry to create as the turtle moves."], "extent": [25561, 25619]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 4, "role": "item", "extent": [25619, 25628], "body": [{"type": "para", "indent": 8, "text": ["You can create a tube path from a skeleton L-system using\n        a ", {"scheme": "Node", "value": "/nodes/sop/polywire", "type": "link", "text": ["Polywire SOP"], "fullpath": "/nodes/sop/polywire"}, "."], "extent": [25628, 25740]}], "container": true}], "container": true, "role": "item_group"}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Skeleton"], "extent": [25740, 25754], "body": [{"type": "para", "indent": 8, "text": ["Draw polylines."], "extent": [25754, 25778]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Tube"], "extent": [25778, 25788], "body": [{"type": "para", "indent": 8, "text": ["Draw tubes."], "extent": [25788, 25808]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Generations"], "extent": [25808, 25821], "body": [{"type": "para", "indent": 4, "text": ["The number of times to repeat the rule-substitution. If you\n    specify a fractional number and ", {"type": "ui", "text": ["Continuous angles"]}, " and/or\n    ", {"type": "ui", "text": ["Continuous length"]}, " are on (below), Houdini scales the\n    geometry generated by the last substitution to give smooth\n    growth between generations."], "extent": [25821, 26107]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start Position"], "extent": [26107, 26123], "body": [{"type": "para", "indent": 4, "text": ["This is the starting point position for the turtle."], "extent": [26123, 26180]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Random Scale"], "extent": [26180, 26194], "body": [{"type": "para", "indent": 4, "text": ["If non-zero, randomly scales all the lengths specified by F\n    and other similar turtle functions."], "extent": [26194, 26299]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Random Seed"], "extent": [26299, 26312], "body": [{"type": "para", "indent": 4, "text": ["The seed to use for the random number generator. By varying\n    this on a L-system using random rules (Ie: random scale, ~,\n    or probabilistic rules) one can generate different instances\n    of the L-system."], "extent": [26312, 26527]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Continuous Angles"], "extent": [26527, 26546], "body": [{"type": "para", "indent": 4, "text": ["If set, the angles rotated by the last generation\u2019s turtle\n    operations will be scaled by the amount into the\n    generation."], "extent": [26546, 26679]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Continuous Length"], "extent": [26679, 26698], "body": [{"type": "para", "indent": 4, "text": ["If set, the lengths taken by the last generation\u2019s turtle\n    operations will be scaled by the amount into the\n    generation."], "extent": [26698, 26830]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Continuous Width"], "extent": [26830, 26848], "body": [{"type": "para", "indent": 4, "text": ["If set, the widths generated by the last generation\u2019s turtle\n    operations will be scaled by the amount into the\n    generation."], "extent": [26848, 26983]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Apply Color"], "extent": [26983, 26996], "body": [{"type": "para", "indent": 4, "text": ["If set, the L-system will output a color attribute on each\n    point. The color value will be found by looking up into the\n    Image File at the current U & V positions. The current U & V\n    is altered with the ' and # turtle operations."], "extent": [26996, 27240]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Image File"], "extent": [27240, 27252], "body": [{"type": "para", "indent": 4, "text": ["This is the image file which is used for the Apply Color\n    operation. The image files used by the pic() expression is\n    under Funcs tab."], "extent": [27252, 27398]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["UV Increment"], "extent": [27398, 27412], "body": [{"type": "para", "indent": 4, "text": ["These determine the default U and V increments of the ' and"], "extent": [27412, 27476]}, {"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["turtle operations."], "extent": [27476, 27502]}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Point Attributes"], "extent": [27502, 27520], "body": [{"type": "para", "indent": 4, "text": ["If the type is Skeleton, this is available. Turning this on\n    will cause the creation of many point attributes to be\n    created to track how each point was generated:"], "extent": [27520, 27696]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["width"], "extent": [27696, 27707], "body": [{"type": "para", "indent": 8, "text": ["The width of the tube that would have been generated."], "extent": [27707, 27769]}], "container": true}, {"type": "dt", "indent": 4, "text": ["segs"], "extent": [27769, 27779], "body": [{"type": "para", "indent": 8, "text": ["The number of segments that would be made on a tube."], "extent": [27779, 27840]}], "container": true}, {"type": "dt", "indent": 4, "text": ["div"], "extent": [27840, 27849], "body": [{"type": "para", "indent": 8, "text": ["The number of divisions the tube would be divided into."], "extent": [27849, 27913]}], "container": true}, {"type": "dt", "indent": 4, "text": ["lage"], "extent": [27913, 27923], "body": [{"type": "para", "indent": 8, "text": ["The vertical increment from the root of the tree. This\n        is affected by the Tube::Vertical Increment parameter.\n        It is similar to arc, but not dependent on edge length."], "extent": [27923, 28113]}], "container": true}, {"type": "dt", "indent": 4, "text": ["arc"], "extent": [28113, 28122], "body": [{"type": "para", "indent": 8, "text": ["The arc length from the root of the turtles path to this\n        point."], "extent": [28122, 28202]}], "container": true}, {"type": "dt", "indent": 4, "text": ["up"], "extent": [28202, 28210], "body": [{"type": "para", "indent": 8, "text": ["The up vector of the turtle at this point."], "extent": [28210, 28261]}], "container": true}, {"type": "dt", "indent": 4, "text": ["gen"], "extent": [28261, 28270], "body": [{"type": "para", "indent": 8, "text": ["The generation that created this point."], "extent": [28270, 28320]}], "container": true}], "container": true}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tube"], "extent": [28320, 28331], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Rows"], "extent": [28331, 28338], "body": [{"type": "para", "indent": 4, "text": ["The number of rows to divide tubes into. A value of 3 will\n    cause the tubes to be swept triangles."], "extent": [28338, 28445]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cols"], "extent": [28445, 28451], "body": [{"type": "para", "indent": 4, "text": ["The number of columns to divide the tubes in. A value of 4\n    means one F will create 4 cross sections."], "extent": [28451, 28561]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Tension"], "extent": [28561, 28570], "body": [{"type": "para", "indent": 4, "text": ["How straight the tubes should sweep to their destination\n    point."], "extent": [28570, 28643]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Branch Blend"], "extent": [28643, 28657], "body": [{"type": "para", "indent": 4, "text": ["How much a new branch should inherit off an old branches\n    direction."], "extent": [28657, 28734]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Thickness"], "extent": [28734, 28745], "body": [{"type": "para", "indent": 4, "text": ["Default width of the tubes."], "extent": [28745, 28778]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Thickness Scale"], "extent": [28778, 28795], "body": [{"type": "para", "indent": 4, "text": ["How much the ! operation will affect the thickness."], "extent": [28795, 28852]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Apply Tube Texture Coordinates"], "extent": [28852, 28884], "body": [{"type": "para", "indent": 4, "text": ["If checked, the tubes will generate uv texture coordinates."], "extent": [28884, 28949]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Vertical Increment"], "extent": [28949, 28969], "body": [{"type": "para", "indent": 4, "text": ["The amount each tube will increment the V texture\n    coordinate."], "extent": [28969, 29041]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Values"], "extent": [29041, 29054], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Step Size"], "extent": [29054, 29066], "body": [{"type": "para", "indent": 4, "text": ["The default size of a movement, such as F, command."], "extent": [29066, 29123]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Step Size Scale"], "extent": [29123, 29140], "body": [{"type": "para", "indent": 4, "text": ["The number used by the \" command."], "extent": [29140, 29179]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Angle"], "extent": [29179, 29186], "body": [{"type": "para", "indent": 4, "text": ["The default angle for an angle, such as /, command. This\n    also becomes the variable a in the expression."], "extent": [29186, 29299]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Angle Scale"], "extent": [29299, 29312], "body": [{"type": "para", "indent": 4, "text": ["The number used by the ; command."], "extent": [29312, 29351]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Variable b"], "extent": [29351, 29363], "body": [{"type": "para", "indent": 4, "text": ["The value of the expression variable b."], "extent": [29363, 29408]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Variable c"], "extent": [29408, 29420], "body": [{"type": "para", "indent": 4, "text": ["The value of the expression variable c."], "extent": [29420, 29465]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Variable d"], "extent": [29465, 29477], "body": [{"type": "para", "indent": 4, "text": ["The value of the expression variable d."], "extent": [29477, 29522]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Gravity"], "extent": [29522, 29531], "body": [{"type": "para", "indent": 4, "text": ["The amount of tropism from the T command. Also becomes the\n    value of the expression variable T."], "extent": [29531, 29635]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Number Of Variables"], "extent": [29635, 29656], "body": [{"type": "para", "indent": 4, "text": ["This multiparm allows the assignment of an arbitrary number\n    of new expression variables."], "extent": [29656, 29754]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Variable Name"], "extent": [29754, 29769], "body": [{"type": "para", "indent": 4, "text": ["The name of the expression variable. This is a single\n    character. Check the Local Variables section to see what\n    variables are already reserved."], "extent": [29769, 29925]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Variable Value"], "extent": [29925, 29941], "body": [{"type": "para", "indent": 4, "text": ["The value of the expression variable."], "extent": [29941, 29985]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Funcs"], "extent": [29985, 29997], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Pic Image File"], "extent": [29997, 30014], "body": [{"type": "para", "indent": 4, "text": ["The image file to use with the pic() expression function."], "extent": [30014, 30077]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Group Prefix"], "extent": [30077, 30091], "body": [{"type": "para", "indent": 4, "text": ["The prefix used by g command."], "extent": [30091, 30126]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Channel Prefix"], "extent": [30126, 30142], "body": [{"type": "para", "indent": 4, "text": ["The prefix used by the chan() expression function."], "extent": [30142, 30198]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Leaf Param A"], "extent": [30198, 30212], "body": [{"type": "para", "indent": 4, "text": ["This is the name of the stamp parameter to stamp the leaf\n    with. The value of the stamp comes from the J, K, or M\n    operation. It can be read upstream using the stamp()\n    function."], "extent": [30212, 30405]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Leaf Param B"], "extent": [30405, 30419], "body": [{"type": "para", "indent": 4, "text": ["This is the name of the stamp parameter to stamp the leaf\n    with. The value of the stamp comes from the J, K, or M\n    operation. It can be read upstream using the stamp()\n    function."], "extent": [30419, 30612]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Leaf Param C"], "extent": [30612, 30626], "body": [{"type": "para", "indent": 4, "text": ["This is the name of the stamp parameter to stamp the leaf\n    with. The value of the stamp comes from the J, K, or M\n    operation. It can be read upstream using the stamp()\n    function."], "extent": [30626, 30820]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Rules"], "extent": [30820, 30832], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Read Rules From File"], "extent": [30832, 30855], "body": [{"type": "para", "indent": 4, "text": ["If this is set, the rule fields are ignored. Instead, the\n    Rule File is read and used as the rules."], "extent": [30855, 30963]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Write Rule Parameters to File"], "extent": [30963, 30994], "body": [{"type": "para", "indent": 4, "text": ["This will write all the current rules to the Rule File."], "extent": [30994, 31055]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Rule File"], "extent": [31055, 31066], "body": [{"type": "para", "indent": 4, "text": ["The name of the file to use as a source of rules. This file\n    should have one line per rule. Blank lines and lines that\n    start with '#' will be ignored, so comments may be added to\n    the rule file with '#'."], "extent": [31066, 31285]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Context Ignore"], "extent": [31285, 31301], "body": [{"type": "para", "indent": 4, "text": ["This is a list of symbols. They will be ignored when trying\n    to determine contexts."], "extent": [31301, 31393]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Context Includes Siblings"], "extent": [31393, 31420], "body": [{"type": "para", "indent": 4, "text": ["By default, the context of each branch only includes the\n    symbols in that branch.  Any sub-branches or parent\n    branches will be skipped over.  Given the rule ", {"type": "code", "text": ["A>B=F"]}, ", ", {"type": "code", "text": ["A[B]"]}, "\n    will not resolve as B is in a sub-branch.  ", {"type": "code", "text": ["A[Q]B"]}, " will\n    resolve because the ", {"type": "code", "text": ["[Q]"]}, " is ignored.  If you change the\n    Context Ignore to have ", {"type": "code", "text": ["[]"]}, ", this effect is removed and\n    ", {"type": "code", "text": ["A[Q]B"]}, " will not resolve but ", {"type": "code", "text": ["A[B]"]}, " will.  The Context\n    Includes Siblings flag restores the pre-Houdini 10\n    behavior of context of sibling branches being included.\n    For example, ", {"type": "code", "text": ["[A]Q[B]"]}, " will resolve if this flag is set, but\n    not resolve if it is not set."], "extent": [31420, 32059]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Premise"], "extent": [32059, 32068], "body": [{"type": "para", "indent": 4, "text": ["The initial state of the L-system. This is the state of the\n    L-system at generation 0."], "extent": [32068, 32163]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Rule #"], "extent": [32163, 32171], "body": [{"type": "para", "indent": 4, "text": ["A rule to apply to the L-system.  Applying the toggle will disable\n    the rule, removing it from the generation procedure."], "extent": [32171, 32301]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [32301, 32309], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Leaf J"], "extent": [32309, 32318], "body": [{"type": "para", "indent": 4, "text": ["This geometry is used by the ", {"type": "code", "text": ["J"]}, " rules."], "extent": [32318, 32363]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Leaf K"], "extent": [32363, 32371], "body": [{"type": "para", "indent": 4, "text": ["This geometry is used by the ", {"type": "code", "text": ["K"]}, " rules."], "extent": [32371, 32416]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Leaf M"], "extent": [32416, 32424], "body": [{"type": "para", "indent": 4, "text": ["This geometry is used by the ", {"type": "code", "text": ["M"]}, " rules."], "extent": [32424, 32469]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Meta Test Input"], "extent": [32469, 32486], "body": [{"type": "para", "indent": 4, "text": ["This geometry is used by the ", {"type": "code", "text": ["in()"]}, " ", {"scheme": null, "value": "#locals", "type": "link", "text": ["function"], "fullpath": "/nodes/sop/lsystem#locals", "fragment": "#locals"}, " to check bounding regions (for topiaries)."], "extent": [32486, 32590]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [32590, 32599], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/polywire", "type": "link", "text": "", "fullpath": "/nodes/sop/polywire"}], "extent": [32599, 32623]}], "container": true}], "text": "Related"}], "title": ["L-System"], "summary": ["Creates fractal geometry from the recursive application of simple rules."], "included": ["/shelf/lsystem"]}