{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "sopcreate", "icon": "LOP/sopcreate", "group": "geometry", "since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["SOP Create"], "extent": [0, 15]}, {"type": "summary", "indent": 0, "text": ["Lets you create geometry in a SOP subnetwork inside this node, so you can create geometry in-place in the LOP network instead of needing a separate SOP network."], "extent": [114, 283]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [283, 298], "body": [{"type": "para", "indent": 0, "text": ["This node is essentially an embedded SOP subnetwork combined with a ", {"scheme": "Node", "value": "/nodes/lop/sopimport", "type": "link", "text": ["SOP Import LOP"], "fullpath": "/nodes/lop/sopimport.html"}, ". It lets you create SOP geometry ", {"type": "q", "text": ["in place"]}, " in the subnet, and then ", {"type": "q", "text": ["import"]}, " it from the subnet, with the same SOP-to-USD controls as on the SOP Import node."], "extent": [298, 562]}, {"type": "para", "indent": 0, "text": ["See ", {"scheme": null, "value": "/solaris/sop_import", "type": "link", "text": ["how SOP import works"], "fullpath": "/solaris/sop_import.html"}, " for detailed information on how the importer converts SOP information into USD."], "extent": [562, 691]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["How to"], "extent": [691, 704], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Add a SOP Create node."], "extent": [704, 735]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["In the network editor, double-click the SOP Create node to go inside to the SOP subnet."], "extent": [735, 830]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Use SOPs to generate geometry."], "extent": [830, 868], "body": [{"type": "para", "indent": 8, "text": ["As you develop the geometry, you can add ", {"type": "code", "text": ["path"]}, " string attributes to SOP primitives to specify where they should appear in the USD scene graph tree when imported. If you specify a relative path (doesn\u2019t start with ", {"type": "code", "text": ["/"]}, "), the value is appended to the SOP Create node\u2019s ", {"type": "ui", "text": ["Import path prefix"]}, " parameter."], "extent": [868, 1178]}, {"type": "para", "indent": 8, "text": ["Remember that for polygons, all faces you want to be part of the same USD mesh prim must have the same value in their ", {"type": "code", "text": ["path"]}, " attribute."], "extent": [1178, 1323]}, {"type": "para", "indent": 8, "text": ["See ", {"scheme": null, "value": "/solaris/sop_import", "type": "link", "text": ["generating geometry hierarchy"], "fullpath": "/solaris/sop_import.html"}, "."], "extent": [1323, 1389]}, {"type": "para", "indent": 8, "text": ["(The SOP Create node can also create USD ", {"type": "em", "text": ["geometry subsets"]}, " based on SOP string attributes and/or groups. Geometry subsets are useful for assigning materials to groups of faces.)"], "extent": [1389, 1577]}], "container": true}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["End the geometry network with an ", {"scheme": "Node", "value": "/nodes/sop/output", "type": "link", "text": ["Output SOP"], "fullpath": "/nodes/sop/output.html"}, "."], "extent": [1577, 1647], "body": [{"type": "para", "indent": 8, "text": ["The Output node is used as the output for the subnetwork. If you don\u2019t have an Output node in the subnet, it uses whatever node has the display flag."], "extent": [1647, 1806]}], "container": true}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["In the network editor, press ", {"keys": ["U"], "type": "keys", "text": null}, " to go back up to the LOP network."], "extent": [1806, 1882]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["In the SOP Create node\u2019s parameters, set the ", {"type": "ui", "text": ["Import path prefix"]}, "."], "extent": [1882, 1958], "body": [{"type": "para", "indent": 8, "text": ["Any geometry that doesn\u2019t have a ", {"type": "code", "text": ["path"]}, " attribute is given a generated name (for example, all polygons go into a mesh prim named something like ", {"type": "code", "text": ["mesh_0"]}, "), and put under this prim path."], "extent": [1958, 2152]}, {"type": "para", "indent": 8, "text": ["Any geometry with a relative ", {"type": "code", "text": ["path"]}, " attribute value is prefixed with this prim path."], "extent": [2152, 2246]}, {"type": "para", "indent": 8, "text": ["See ", {"scheme": null, "value": "/solaris/sop_import", "type": "link", "text": ["generating geometry hierarchy"], "fullpath": "/solaris/sop_import.html"}, "."], "extent": [2246, 2313]}], "container": true}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [2313, 2325], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Load As Reference"], "extent": [4880, 4899], "body": [{"type": "para", "indent": 4, "text": ["When this is on, the geometry will be imported as a ", {"scheme": null, "value": "/solaris/usd#payloads", "type": "link", "text": ["payload"], "fullpath": "/solaris/usd.html#payloads", "fragment": "#payloads"}, ". When this is off, the geometry will be imported by sublayering its hierarchy over the existing scene tree (see ", {"scheme": null, "value": "/solaris/usd#sublayers", "type": "link", "text": ["sublayers and references"], "fullpath": "/solaris/usd.html#sublayers", "fragment": "#sublayers"}, ")."], "extent": [4921, 5174]}], "container": true, "attrs": {"id": "asreference"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Sublayer Style"], "extent": [5174, 5190], "body": [{"type": "para", "indent": 4, "text": ["(When ", {"type": "ui", "text": ["Load as reference"]}, " is off.) By default, geometry imported from SOPs is treated like geometry imported from a file on disk: you can only edit it by applying stronger ", {"scheme": null, "value": "/solaris/usd#compose", "type": "link", "text": ["opinions"], "fullpath": "/solaris/usd.html#compose", "fragment": "#compose"}, " on top. Changing this parameter, allows this node to put the geometry in the ", {"type": "em", "text": ["active layer"]}, ", so it can be modified by LOP nodes connected to this node\u2019s output."], "extent": [5213, 5585]}, {"type": "para", "indent": 4, "text": ["The node does this by copying the contents generated from the SOP geometry into an anonymous in-memory USD layer. This is slower, but provides more options for how many USD layers you need to write to disk, and what goes in each layer. This is similar to the operation of a ", {"scheme": "Node", "value": "/nodes/lop/loadlayer", "type": "link", "text": ["Load Layer for Editing LOP"], "fullpath": "/nodes/lop/loadlayer.html"}, "."], "extent": [5585, 5913]}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["Copy SOP Layer Into New Active Layer"]}, " style creates a new active layer into which the SOP layer contents are copied. The ", {"type": "code", "text": ["Merge SOP Layer Into Existing Active Layer"]}, " style copies the SOP layer contents into the input node\u2019s active layer, resulting in no new layers on the stage."], "extent": [5913, 6202]}], "container": true, "attrs": {"id": "copycontents"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Adjust Transforms for Input Hierarchy"], "extent": [6202, 6241], "body": [{"type": "para", "indent": 4, "text": ["(When ", {"type": "ui", "text": ["Load as reference"]}, " is off.) When this is on (the default), the node automatically compensates for transform problems created if you round-trip geometry from LOPs to SOPs (as packed USD primitives) and then back to LOPs again. If you know you are not round-tripping LOPs  \u2192 SOP packed USD primitives  \u2192 LOPs, you can turn this off to make importing faster."], "extent": [6272, 6642]}, {"type": "para", "indent": 4, "text": ["Packed Primitives in SOPs only have a single transform, representing the full local-to-world transformation of the packed geometry. If you export a USD geometry primitive to SOPs ", {"type": "em", "text": ["as a packed USD primitive"]}, ", Houdini flattens the full transformation hierarchy under the USD prim into a single transformation matrix."], "extent": [6642, 6962]}, {"type": "para", "indent": 4, "text": ["This creates a problem if you then ", {"type": "q", "text": ["round-trip"]}, " the SOP packed primitive back into LOPs, as the descendants will have their own transforms, which are ", {"type": "em", "text": ["also"]}, " now incorporated into the root prim\u2019s transform imported from SOPs. This results in an incorrect double-application of the transforms."], "extent": [6962, 7259]}, {"type": "para", "indent": 4, "text": ["When this parameter is on (the default), the node examines every transformation imported from SOPs, in the context of the prim\u2019s location in the scene graph hierarchy. If the prim (or its ancestors) already exist on the input stage, the node inverts the transformations of the ancestor prims, and applies them as additional local transformations on the prim. This ensures that the final world space location of the prim in LOPS will be the same as it was in SOPs."], "extent": [7259, 7728]}, {"type": "para", "indent": 4, "text": ["If ", {"type": "ui", "text": ["Copy Contents Into Editable Layer"]}, " is on, the node applies these additional transforms directly to the imported primitives, otherwise the node creates a new active layer and puts the transforms in the new layer as overrides."], "extent": [7728, 7964]}], "container": true, "attrs": {"id": "adjustxformsforinput"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Bind Materials"], "extent": [7964, 7980], "body": [{"type": "para", "indent": 4, "text": ["Binds materials to the imported USD primitives based on the ", {"type": "code", "text": ["usdmaterialpath"]}, " SOP attribute.\n    The ", {"type": "code", "text": ["usdmaterialpath"]}, " value can specify either the path to a material primitive, or the path to another primitive to copy the material binding from.\n    If the ", {"type": "ui", "text": ["Partition Attributes"]}, " include a ", {"type": "code", "text": ["materialBind"]}, " SOP attribute, material bindings can also be created for the resulting geometry subsets."], "extent": [8003, 8404]}], "container": true, "attrs": {"id": "bindmaterials"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Type"], "extent": [8404, 8420], "body": [{"type": "para", "indent": 4, "text": ["(When ", {"type": "ui", "text": ["Load as reference"]}, " is on.) Control whether the SOP geometry is added to the reference primitive as a Payload or Reference composition arc. Also indicates whether this new composition arc should be made stronger or weaker than existing composition arcs on this primitive."], "extent": [8438, 8723]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Weaker Payload"], "extent": [8723, 8743], "body": [{"type": "para", "indent": 8, "text": ["Create a Payload composition arc that provides weaker opinions than existing payloads."], "extent": [8743, 8839]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Stronger Payload"], "extent": [8839, 8861], "body": [{"type": "para", "indent": 8, "text": ["Create a Payload composition arc that provides stronger opinions than existing payloads."], "extent": [8861, 8959]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Weaker Reference"], "extent": [8959, 8981], "body": [{"type": "para", "indent": 8, "text": ["Create a Reference composition arc that provides weaker opinions than existing references."], "extent": [8981, 9081]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Stronger Reference"], "extent": [9081, 9105], "body": [{"type": "para", "indent": 8, "text": ["Create a Reference composition arc that provides stronger opinions than existing references."], "extent": [9105, 9207]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "reftype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Primitive"], "extent": [9207, 9228], "body": [{"type": "para", "indent": 4, "text": ["(When ", {"type": "ui", "text": ["Load as reference"]}, " is on.) This node treats the converted geometry like an external USD geometry file. This controls which root-level prim to import from the USD prim hierarchy generated by converting the SOP geometry. You should leave this set to ", {"type": "q", "text": ["Reference Automatically Chosen Primitive"]}, "."], "extent": [9246, 9552]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Reference Automatically Chosen Primitive"], "extent": [9552, 9598], "body": [{"type": "para", "indent": 8, "text": ["If the referenced file has a ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd.html#default_prim", "fragment": "#default_prim"}, " set, use that. If there is no default prim, use the first Xform prim at the root. If there is no Xform prim at the root, use the first root prim of any type."], "extent": [9598, 9840]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Reference Default Primitive"], "extent": [9840, 9873], "body": [{"type": "para", "indent": 8, "text": ["If the referenced file has a ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd.html#default_prim", "fragment": "#default_prim"}, " set, use that. If not, display a warning on this node."], "extent": [9873, 10012]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Reference Specific Primitive"], "extent": [10012, 10046], "body": [{"type": "para", "indent": 8, "text": ["Reference in the scene graph path in the ", {"type": "ui", "text": ["Reference primitive path"]}, " parameter."], "extent": [10046, 10136]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "refprim"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Primitive Path"], "extent": [10136, 10162], "body": [{"type": "para", "indent": 4, "text": ["The scene graph path of the prim in the referenced layer that that is composed onto the stage. Contents of the referenced layer outside of this referenced primitive path will not appear on the composed stage. This parameter is only used if the ", {"type": "ui", "text": ["Reference primitive"]}, " parameter is set to ", {"type": "q", "text": ["Reference specific primitive"]}, "."], "extent": [11621, 11946]}, {"type": "para", "indent": 4, "text": ["(If you set this field ", {"type": "code", "text": ["automaticPrim"]}, " or ", {"type": "code", "text": ["defaultPrim"]}, ", it mimics the behavior of setting ", {"type": "ui", "text": ["Reference primitive"]}, " to ", {"type": "q", "text": ["Reference automatically chosen primitive"]}, " or ", {"type": "q", "text": ["Reference default primitive"]}, ".)"], "extent": [11946, 12148]}], "container": true, "attrs": {"id": "refprimpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Path"], "extent": [8988, 9004], "body": [{"type": "para", "indent": 4, "text": ["In create mode, this parameter specifies a single primitive path. This is the scene graph path where the referenced branch will be attached. If this prim doesn\u2019t exist, the node will create it. In edit mode, this parameter is a primitive pattern that will be matched against the existing primitives on the stage connected to this node\u2019s first input. You can use ", {"scheme": null, "value": "#locals", "type": "link", "text": ["local variables"], "fullpath": "/nodes/lop/reference.html#locals", "fragment": "#locals"}, " to control the reference primitive path."], "extent": [9023, 9457]}], "container": true, "attrs": {"id": "primpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Make Instanceable"], "extent": [10281, 10300], "body": [{"type": "para", "indent": 4, "text": ["Mark the new or modified prims as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable (as in ", {"type": "q", "text": ["native instancing"]}, ")"], "fullpath": "/solaris/usd.html#instancing", "fragment": "#instancing"}, ". This saves memory if you reference the same branch into multiple places, but makes the descendants of the referenced prim not editable. If this option is off, the prims are not explicitly marked as not instanceable. Instead, the current instanceable value on each prim is left unchanged."], "extent": [10323, 10718]}], "container": true, "attrs": {"id": "instanceable"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Parent Primitive Kind"], "extent": [10288, 10311], "body": [{"type": "para", "indent": 4, "text": ["If the prim at ", {"type": "ui", "text": ["Primitive path"]}, " doesn\u2019t exist, this node will create it. If it has to create the prim, it will give any intermediate prims it has to create this ", {"scheme": null, "value": "/solaris/usd#kinds", "type": "link", "text": ["kind"], "fullpath": "/solaris/usd.html#kinds", "fragment": "#kinds"}, "."], "extent": [10336, 10531]}], "container": true, "attrs": {"id": "parentprimkind"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Parent Primitive Type"], "extent": [20597, 20620], "body": [{"type": "para", "indent": 4, "text": ["If the prim at ", {"type": "ui", "text": ["Primitive path"]}, " doesn\u2019t exist, this node will create it. If it has to create the prim, it will give any intermediate prims it has to create this type."], "extent": [20645, 20820]}], "container": true, "attrs": {"id": "parentprimtype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Show LOP Stage in SOPs"], "extent": [139, 163], "body": [{"type": "para", "indent": 4, "text": ["Points to a LOP node whose stage will be rendered into the Scene Viewer along with the SOP geometry when diving inside this SOP Network. Any USD cameras and lights will also become available to look through in the viewport\u2019s camera menu. Specifying a LOP Network instead of a LOP Node path will fetch the stage of the LOP Node with the display flag set within the target LOP Network."], "extent": [185, 574]}, {"type": "para", "indent": 4, "text": ["This SOP Network and the LOP node can be anywhere in the hip file and this feature will still work, but most commonly it comes from the LOP Network in which this SOP Network is embedded. It is also possible to create this same parameter as a spare parameter on any other node that contains SOP nodes (such as a Geometry Object) to cause a USD stage to be rendered in the Scene Viewer when inside the SOP Network."], "extent": [574, 990]}], "container": true, "attrs": {"id": "showlopstage"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import Group"], "extent": [10567, 10581], "body": [{"type": "para", "indent": 4, "text": ["Turn this on and specify a group name (or a space-separated list of ", {"scheme": null, "value": "/model/groups", "type": "link", "text": ["group syntax"], "fullpath": "/model/groups.html"}, ") to import. If you turn this on but leave the field blank, it imports all geometry."], "extent": [10597, 10783]}], "container": true, "attrs": {"id": "group"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import Group Type"], "extent": [10783, 10802], "body": [{"type": "para", "indent": 4, "text": ["When enabled, specifies the whether the ", {"type": "ui", "text": ["Import Group"]}, " is a point or primitive group."], "extent": [10822, 10915]}], "container": true, "attrs": {"id": "grouptype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import Path Prefix"], "extent": [10915, 10935], "body": [{"type": "para", "indent": 4, "text": ["If a prim being imported has an automatically generated name (like ", {"type": "code", "text": ["mesh_0"]}, ") because it had no path primitive, or if it has a path primitive but the path is relative (does not start with ", {"type": "code", "text": ["/"]}, "), the node automatically prefixes the name/path fragment with this path. This is a way of keeping ", {"type": "q", "text": ["un-pathed"]}, " prims organized under a single branch. (See ", {"scheme": null, "value": "/solaris/sop_import", "type": "link", "text": ["how to create geometry hierarchy"], "fullpath": "/solaris/sop_import.html"}, ".)"], "extent": [10956, 11363]}, {"type": "para", "indent": 4, "text": ["(The default is ", {"type": "code", "text": ["/$OS"]}, " which puts ", {"type": "q", "text": ["un-pathed"]}, " prims under a root prim with the name of this node.)"], "extent": [11363, 11467]}], "container": true, "attrs": {"id": "pathprefix"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Layer Save Path"], "extent": [11467, 11484], "body": [{"type": "para", "indent": 4, "text": ["When turned on, sets the Save Path metadata for the layer containing the geometry to this file path. When you write out USD using a ", {"scheme": "Node", "value": "/nodes/out/usd", "type": "link", "text": ["USD render node"], "fullpath": "/nodes/out/usd.html"}, ", the geometry is saved out to a ", {"type": "code", "text": [".usd"]}, " layer file using this file path (after ", {"scheme": null, "value": "/solaris/output#processors", "type": "link", "text": ["output processing"], "fullpath": "/solaris/output.html#processors", "fragment": "#processors"}, ")."], "extent": [11503, 11798]}], "container": true, "attrs": {"id": "savepath"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Transform"], "extent": [2864, 2880], "body": [{"type": "para", "indent": 0, "text": ["Applies a transformation to the primitives imported from the SOP network."], "extent": [2880, 2956]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Transform"], "extent": [2201, 2216], "body": [{"type": "para", "indent": 8, "text": ["How the transform parameters below apply to the primitive. (Because each USD prim can contain multiple transforms, ", {"type": "em", "text": ["and"]}, " be affected by parent transforms, there are many different ways to apply new transforms.)"], "extent": [2255, 2475]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Append"], "extent": [2475, 2491], "body": [{"type": "para", "indent": 12, "text": ["Apply the parameters as a new, most local transform."], "extent": [2491, 2557]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Prepend"], "extent": [2557, 2574], "body": [{"type": "para", "indent": 12, "text": ["Apply the parameters as a new, ", {"type": "em", "text": ["least"]}, " local transform."], "extent": [2574, 2643]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Overwrite or Append"], "extent": [2643, 2672], "body": [{"type": "para", "indent": 12, "text": ["If a local transform exists with the name ", {"type": "code", "text": ["xformOp:transform"]}, ", ", {"type": "em", "text": ["overwrite"]}, " it with the parameters. Otherwise, apply it as a new, most local transform."], "extent": [2672, 2836]}, {"type": "para", "indent": 12, "text": ["If this replaces an existing transform, that transform\u2019s order in the local transform stack is not affected."], "extent": [2836, 2958]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Overwrite or Prepend"], "extent": [2958, 2988], "body": [{"type": "para", "indent": 12, "text": ["Like ", {"type": "q", "text": ["Overwrite or Append"]}, ", but ", {"type": "em", "text": ["least"]}, " local."], "extent": [2988, 3048]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Apply Transform in World Space"], "extent": [3048, 3088], "body": [{"type": "para", "indent": 12, "text": ["Apply the parameters as a new, most local transform. However, prior to applying the transform, it is updated so that the result of the transform appears as if the transform was being applied in world space, before any local or ancestor transformations were applied to the primitive."], "extent": [3088, 3384]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Replace All Local Transforms"], "extent": [3384, 3422], "body": [{"type": "para", "indent": 12, "text": ["The transform specified in the remaining transform parameters is always applied as a new transform. Prior to applying this transform, all existing transform operations on the local transform stack are cleared so that only the supplied transform remains on the local transform stack (though ancestor transforms still have an effect)."], "extent": [3422, 3768]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "xn__xformOptransform_51a"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Transform order"], "extent": [3768, 3789], "body": [{"type": "para", "indent": 8, "text": ["The order in which Houdini applies translates, rotates, and scales, and the order in which it applies rotation."], "extent": [3808, 3929]}], "container": true, "attrs": {"id": "xOrd"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Translate"], "extent": [3929, 3944], "body": [{"type": "para", "indent": 8, "text": ["Movement amount along XYZ axes."], "extent": [3960, 4001]}], "container": true, "attrs": {"id": "t"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Rotate"], "extent": [4001, 4013], "body": [{"type": "para", "indent": 8, "text": ["Degrees rotation around XYZ axes."], "extent": [4029, 4072]}], "container": true, "attrs": {"id": "r"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Scale"], "extent": [4072, 4083], "body": [{"type": "para", "indent": 8, "text": ["Non-uniform scaling along XYZ axes."], "extent": [4099, 4144]}], "container": true, "attrs": {"id": "s"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Uniform scale"], "extent": [4144, 4163], "body": [{"type": "para", "indent": 8, "text": ["Scales the object uniformly along all three axes."], "extent": [4183, 4243]}], "container": true, "attrs": {"id": "scale"}, "role": "item"}], "container": true}, {"level": 3, "type": "sep", "indent": 4, "text": [" Pivot Transform "], "extent": [4243, 4271], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Pivot translate"], "extent": [4297, 4322], "body": [{"type": "para", "indent": 12, "text": ["Moves the local origin of the object."], "extent": [4342, 4393]}], "container": true, "attrs": {"id": "p"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Pivot rotate"], "extent": [4393, 4415], "body": [{"type": "para", "indent": 12, "text": ["Rotates the local origin of the object after translation."], "extent": [4436, 4508]}], "container": true, "attrs": {"id": "pr"}, "role": "item"}], "container": true}], "container": true, "attrs": {"id": "pivot_xform"}}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["SOP Import"], "extent": [2999, 3016], "body": [{"level": 3, "id": "prim_def", "container": true, "type": "h", "indent": 0, "text": ["Primitive Definition"], "extent": [16, 54], "body": [{"type": "para", "indent": 0, "text": ["Parameters in this group guide the translation process in terms of how USD primitives are generated from the source SOP geometry."], "extent": [54, 186]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Packed USD Primitives"], "extent": [186, 209], "body": [{"type": "para", "indent": 4, "text": ["What to do with packed USD primitives in the imported SOP geometry."], "extent": [236, 313]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Ignore"], "extent": [313, 325], "body": [{"type": "para", "indent": 8, "text": ["Ignore packed USD primitives in the source SOP geometry."], "extent": [325, 391]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Overlay Transforms"], "extent": [391, 415], "body": [{"type": "para", "indent": 8, "text": ["Import the transformation of the packed USD primitive as an override (", {"type": "code", "text": ["Over"]}, ") prim. This makes it easy to transform the packed USD prims without unpacking them."], "extent": [415, 585]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Overlay Transforms and Attributes"], "extent": [585, 624], "body": [{"type": "para", "indent": 8, "text": ["In addition to ", {"type": "ui", "text": ["Overlay Transforms"]}, ", point or primitive SOP attributes on the packed USD primitive are imported as primvars with ", {"type": "code", "text": ["constant"]}, " interpolation."], "extent": [624, 790]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "packedusdhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Other Primitives"], "extent": [790, 808], "body": [{"type": "para", "indent": 4, "text": ["What to do with regular non-packed primitives (points, curves, polygons, spheres, and so on)."], "extent": [835, 934]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Define"], "extent": [934, 946], "body": [{"type": "para", "indent": 8, "text": ["Create the USD prims for the imported geometry if they don\u2019t already exist. This is the standard way to import geometry."], "extent": [946, 1076]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Overlay"], "extent": [1076, 1089], "body": [{"type": "para", "indent": 8, "text": ["Create the USD prims as overrides. They will only be visible as changes to any prims that exist at a lower level with the same paths. This may be useful where you only want to import and modify certain attributes from SOPs onto existing USD geometry."], "extent": [1089, 1349]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Overlay Transforms"], "extent": [1349, 1373], "body": [{"type": "para", "indent": 8, "text": ["Like ", {"type": "q", "text": ["Overlay"]}, ", but only imports transform data."], "extent": [1373, 1431]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "otherprimhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Define Only Leaf Primitives"], "extent": [1431, 1460], "body": [{"type": "para", "indent": 4, "text": ["Author intermediate primitives (for example, any ", {"type": "code", "text": ["Xform"]}, " prims created for the ", {"type": "ui", "text": ["Import path prefix"]}, ") as overrides instead of definitions. This means if they don\u2019t match up with underlying prims in lower layers, the leaf prims won\u2019t be added to the scene. This is useful if you only want to import the geometry if its ancestors already exist in the scene tree."], "extent": [1489, 1856]}, {"type": "para", "indent": 4, "text": ["(Note that all of the data is still imported, it just may not be visible in the scene graph tree or the viewport.)"], "extent": [1856, 1976]}], "container": true, "attrs": {"id": "defineonlyleafprims"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Packed Primitives"], "extent": [1976, 1995], "body": [{"type": "para", "indent": 4, "text": ["What to do with SOP-native packed primitives."], "extent": [2019, 2070]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Create Xforms"], "extent": [2070, 2089], "body": [{"type": "para", "indent": 8, "text": ["Creates an ", {"type": "code", "text": ["Xform"]}, " prim from the packed primitive\u2019s transform and attributes, and the packed primitive\u2019s geometry is imported underneath."], "extent": [2089, 2236]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Native Instances"], "extent": [2236, 2265], "body": [{"type": "para", "indent": 8, "text": ["Import the geometry in packed primitives as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable references"], "fullpath": "/solaris/usd.html#instancing", "fragment": "#instancing"}, ". This imports each piece as a prototype under a ", {"type": "code", "text": ["Prototypes"]}, " prim under the ", {"type": "ui", "text": ["Import Path Prefix"]}, " prim."], "extent": [2265, 2473]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Point Instancer"], "extent": [2473, 2501], "body": [{"type": "para", "indent": 8, "text": ["Import the geometry in packed primitives as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["point instanced geometry"], "fullpath": "/solaris/usd.html#instancing", "fragment": "#instancing"}, ". This imports each unique piece as a prototype under the point instancer prim."], "extent": [2501, 2684]}, {"type": "para", "indent": 8, "text": ["You can assign a SOP primitive attribute to the packed primitive named ", {"type": "code", "text": ["usdinstancerpath"]}, " to specify the USD scene graph path of the instancer."], "extent": [2684, 2837]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Unpack"], "extent": [2837, 2849], "body": [{"type": "para", "indent": 8, "text": ["Only imports the packed primitive\u2019s geometry.\n        Unlike the ", {"type": "ui", "text": ["Create Xforms"]}, " mode, this does not create any additional hierarchy, and is equivalent to ", {"scheme": "Node", "value": "/nodes/sop/unpack", "type": "link", "text": ["unpacking"], "fullpath": "/nodes/sop/unpack.html"}, " the packed primitive prior to being imported.\n        This can be useful for importing multiple pieces of geometry without merging their attributes."], "extent": [2849, 3192]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "packedhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Agents"], "extent": [3192, 3200], "body": [{"type": "para", "indent": 4, "text": ["What to do with ", {"scheme": null, "value": "/crowds/agents", "type": "link", "text": ["agent primitives"], "fullpath": "/crowds/agents.html"}, ".\n    In all modes, a prim is created from the agent primitive\u2019s transform and attributes, and the agent\u2019s geometry and animation are imported underneath."], "extent": [3223, 3432]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Create Instanced SkelRoots"], "extent": [3432, 3464], "body": [{"type": "para", "indent": 8, "text": ["Imports the agent\u2019s skeleton and geometry as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable references"], "fullpath": "/solaris/usd.html#instancing", "fragment": "#instancing"}, " to a ", {"type": "code", "text": ["SkelRoot"]}, " prim enclosing the skeleton and skinned primitives.\n        This imports each unique agent definition as a prototype under an ", {"type": "code", "text": ["agentdefinitions"]}, " prim under the ", {"type": "ui", "text": ["Import Path Prefix"]}, " prim."], "extent": [3464, 3773]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create SkelRoots"], "extent": [3773, 3795], "body": [{"type": "para", "indent": 8, "text": ["Creates a ", {"type": "code", "text": ["SkelRoot"]}, " prim enclosing the agent\u2019s skeleton and skinned geometry, which is imported underneath.\n        This will be less efficient than ", {"type": "ui", "text": ["Create Instanced SkelRoots"]}, " for a large crowd, but can be useful for e.g. importing a single character where instancing is unnecessary."], "extent": [3795, 4093]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Instanced Skeletons"], "extent": [4093, 4125], "body": [{"type": "para", "indent": 8, "text": ["Imports the agent\u2019s skeleton as an ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable reference"], "fullpath": "/solaris/usd.html#instancing", "fragment": "#instancing"}, " to a ", {"type": "code", "text": ["Skeleton"]}, " prim.\n        This imports each unique agent definition as a prototype under an ", {"type": "code", "text": ["agentdefinitions"]}, " prim under the ", {"type": "ui", "text": ["Import Path Prefix"]}, " prim."], "extent": [4125, 4377]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Skeletons"], "extent": [4377, 4399], "body": [{"type": "para", "indent": 8, "text": ["Imports the agent\u2019s skeleton as a ", {"type": "code", "text": ["Skeleton"]}, " prim under the agent\u2019s ", {"type": "code", "text": ["Xform"]}, " prim.\n        This will be less efficient than ", {"type": "ui", "text": ["Create Instanced Skeletons"]}, " for a large crowd, but can be useful for e.g. importing a single character where instancing is unnecessary."], "extent": [4399, 4670]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create SkelAnimations"], "extent": [4670, 4697], "body": [{"type": "para", "indent": 8, "text": ["Only imports the agent\u2019s joint animation, creating a ", {"type": "code", "text": ["SkelAnimation"]}, " prim.\n        This can be used to efficiently import a sequence of frames, since the agent\u2019s skeleton and rest geometry are typically unchanged between frames."], "extent": [4697, 4935]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "agenthandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["NURBS Curves"], "extent": [4935, 4949], "body": [{"type": "para", "indent": 4, "text": ["What to do with NURBS curve primitives."], "extent": [4977, 5022]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Convert to Basis Curves"], "extent": [5022, 5051], "body": [{"type": "para", "indent": 8, "text": ["Import the curves as a ", {"type": "code", "text": ["BasisCurves"]}, " primitive.\n        This only supports cubic curves, but is useful for ", {"scheme": null, "value": "/solaris/usd#render", "type": "link", "text": ["rendering through Hydra"], "fullpath": "/solaris/usd.html#render", "fragment": "#render"}, "."], "extent": [5051, 5214]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create NURBS Curves"], "extent": [5214, 5239], "body": [{"type": "para", "indent": 8, "text": ["Import the curves as a ", {"type": "code", "text": ["NurbsCurves"]}, " primitive.\n        This provides complete round-tripping of NURBS curves, but has limited support for ", {"scheme": null, "value": "/solaris/usd#rendering", "type": "link", "text": ["rendering through Hydra"], "fullpath": "/solaris/usd.html#rendering", "fragment": "#rendering"}, "."], "extent": [5239, 5437]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "nurbscurvehandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["NURBS Surfaces"], "extent": [5437, 5453], "body": [{"type": "para", "indent": 4, "text": ["What to do with NURBS surface primitives."], "extent": [5480, 5527]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Convert to Meshes"], "extent": [5527, 5550], "body": [{"type": "para", "indent": 8, "text": ["Import the surface as a ", {"type": "code", "text": ["Mesh"]}, " primitive, which can be useful for ", {"scheme": null, "value": "/solaris/usd#render", "type": "link", "text": ["rendering through Hydra"], "fullpath": "/solaris/usd.html#render", "fragment": "#render"}, "."], "extent": [5550, 5672]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create NURBS Patches"], "extent": [5672, 5698], "body": [{"type": "para", "indent": 8, "text": ["Import the surface as a ", {"type": "code", "text": ["NurbsPatch"]}, " primitive.\n        This can be useful for round-tripping of NURBS surfaces, but has limited support for ", {"scheme": null, "value": "/solaris/usd#rendering", "type": "link", "text": ["rendering through Hydra"], "fullpath": "/solaris/usd.html#rendering", "fragment": "#rendering"}, "."], "extent": [5698, 5898]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "nurbssurfhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Kind Authoring"], "extent": [5898, 5914], "body": [{"type": "para", "indent": 4, "text": ["How to assign ", {"scheme": null, "value": "/solaris/usd#kinds", "type": "link", "text": ["kinds"], "fullpath": "/solaris/usd.html#kinds", "fragment": "#kinds"}, " to imported prims."], "extent": [5934, 5999]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Geometry is One Component"], "extent": [5999, 6034], "body": [{"type": "para", "indent": 8, "text": ["Set root primitives in the imported tree to Component. Do not set kinds on descendants."], "extent": [6034, 6131]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Nested Groups and Components"], "extent": [6131, 6165], "body": [{"type": "para", "indent": 8, "text": ["Set leaf primitives in the imported tree to Component. Set branch primitives to Group."], "extent": [6165, 6261]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Nested Assembly, Groups, and Components"], "extent": [6261, 6306], "body": [{"type": "para", "indent": 8, "text": ["Set root prims in the imported tree to Assembly. Set intermediate branch prims to Group. Set leaf prims to Component."], "extent": [6306, 6433]}], "container": true}, {"type": "dt", "indent": 4, "text": ["None"], "extent": [6433, 6443], "body": [{"type": "para", "indent": 8, "text": ["Do not set kinds on the imported prims."], "extent": [6443, 6492]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "kindschema"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Path Attributes"], "extent": [6492, 6509], "body": [{"type": "para", "indent": 4, "text": ["A (comma or space-separated) list of names of SOP ", {"type": "strong", "text": ["primitive string attributes"]}, " to use to use as prim paths to put the SOP geometry into. The default is ", {"type": "code", "text": ["path,name"]}, ". See ", {"scheme": null, "value": "#import", "type": "link", "text": ["geometry hierarchy"], "fullpath": "/nodes/lop/_sopimport_shared.html#import", "fragment": "#import"}, " above."], "extent": [6527, 6738]}, {"type": "para", "indent": 4, "text": ["If the list has more than one attribute, the importer checks each attribute for the first non-empty value."], "extent": [6738, 6850]}, {"type": "para", "indent": 4, "text": ["If the string value a full path, that path is used as the USD scene graph path for that primitive. If the string is a relative path (or just a name), the string is appended to the ", {"type": "ui", "text": ["Import Path Prefix"]}, " string to generate a full scene graph path."], "extent": [6850, 7102]}, {"type": "para", "indent": 4, "text": ["If none of the listed attributes exist on a given SOP primitive, or all values are an empty string, the importer generates a name automatically (for example, ", {"type": "code", "text": ["sphere_0"]}, ")."], "extent": [7102, 7278]}], "container": true, "attrs": {"id": "pathattr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Prefix Absolute Paths"], "extent": [7278, 7301], "body": [{"type": "para", "indent": 4, "text": ["Whether absolute path values from ", {"type": "ui", "text": ["Path Attributes"]}, " should be prefixed/parented or not. By default this is off and only relative path values are prefixed."], "extent": [7330, 7492]}], "container": true, "attrs": {"id": "prefixabsolutepaths"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import HeightFields as Mesh"], "extent": [7492, 7521], "body": [{"type": "para", "indent": 4, "text": ["If the source SOP geometry contains a height field volume, it will be imported as polygonal mesh. Other layers will be imported as vertex primvar if the values are varying, or constant primvar if the values are constant."], "extent": [7549, 7775]}], "container": true, "attrs": {"id": "heightfieldconvert"}, "role": "item"}], "container": true}]}, {"level": 3, "id": "geom_handling", "container": true, "type": "h", "indent": 0, "text": ["Geometry Handling"], "extent": [7775, 7815], "body": [{"type": "para", "indent": 0, "text": ["These parameters provide options to alter the interpretation of the SOP geometry data."], "extent": [7815, 7904]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Treat Polygons as Subdivision Surfaces"], "extent": [7904, 7944], "body": [{"type": "para", "indent": 4, "text": ["For polygon meshes that are not already tagged with a subdivision scheme, author a ", {"type": "code", "text": ["subdivisionScheme"]}, " attribute set to ", {"type": "code", "text": ["catmullClark"]}, ". This will convert them to subdivision surfaces."], "extent": [7968, 8157]}], "container": true, "attrs": {"id": "polygonsassubd"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Subdivision Group"], "extent": [8157, 8176], "body": [{"type": "para", "indent": 4, "text": ["If ", {"type": "ui", "text": ["Treat Polygons as Subdivision Surfaces"]}, " is on, only convert polygons in this primitive ", {"scheme": null, "value": "/model/groups", "type": "link", "text": ["group"], "fullpath": "/model/groups.html"}, " into subdivision surfaces."], "extent": [8195, 8342]}], "container": true, "attrs": {"id": "subdgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reverse Polygon Vertex Ordering"], "extent": [8342, 8375], "body": [{"type": "para", "indent": 4, "text": ["USD supports an ", {"type": "code", "text": ["orientation"]}, " attribute on mesh primitives that indicates whether polygons have a left-handed or right-handed ordering, while SOP geometry is always left-handed ordering. When this option is on, the importer always reorders vertices (and associated primvars) to be right-handed."], "extent": [8400, 8700]}, {"type": "para", "indent": 4, "text": ["This is useful when round tripping right-handed oriented polygons from USD into SOPs and back into USD. The data is always converted to a left handed ordering when importing it into SOPs. If you imported the polygons back into USD without this option, they would be left-handed, unlike the original."], "extent": [8700, 9009]}], "container": true, "attrs": {"id": "reversepolygons"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Set Missing Widths"], "extent": [9009, 9029], "body": [{"type": "para", "indent": 4, "text": ["USD has a fallback value of 1.0 for the width of Curves and Points, which is often far wider/thicker than desired. If the SOP geometry does not explicitly author width/pscale data, this control can be used instead to explicitly author a USD value."], "extent": [9055, 9309]}], "container": true, "attrs": {"id": "setmissingwidths"}, "role": "item"}], "container": true}]}, {"level": 3, "id": "import_data", "container": true, "type": "h", "indent": 0, "text": ["Import Data"], "extent": [9309, 9341], "body": [{"type": "para", "indent": 0, "text": ["These parameters affect the conversion of SOP geometry attributes into USD attributes and primvars, and the choice between default and time sampled value authoring."], "extent": [9341, 9508]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Author Time Samples"], "extent": [9508, 9529], "body": [{"type": "para", "indent": 4, "text": ["Whether values imported from SOPs should be authored as default values for the corresponding USD attributes, or as a time sample (at the time in the timeline)."], "extent": [9556, 9721]}, {"type": "para", "indent": 4, "text": ["(When the USD system is asked for an attribute value, it returns the default if no time samples exist on the attribute. Otherwise it returns a value interpolated from the time sample data.)"], "extent": [9721, 9916]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["If SOP is Time Dependent"], "extent": [9916, 9946], "body": [{"type": "para", "indent": 8, "text": ["If the SOP node the geometry comes from is time-dependent (is animated or contains animated values), write time samples. Otherwise, write defaults."], "extent": [9946, 10103]}], "container": true}, {"type": "dt", "indent": 4, "text": ["If Not Specifically Excluded"], "extent": [10103, 10137], "body": [{"type": "para", "indent": 8, "text": ["Author all values as time samples except for attributes listed in the ", {"type": "ui", "text": ["Single Value Attributes"]}, " parameter."], "extent": [10137, 10255]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Never"], "extent": [10255, 10266], "body": [{"type": "para", "indent": 8, "text": ["Author all values as defaults."], "extent": [10266, 10306]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["(This is the only parameter on this node you can\u2019t pre-configure on the geometry with the ", {"scheme": "Node", "value": "/nodes/sop/usdconfigure", "type": "link", "text": ["USD Configure SOP"], "fullpath": "/nodes/sop/usdconfigure.html"}, ". This is because it requires a ", {"type": "q", "text": ["live"]}, " SOP, not just attribute values embedded in the geometry.)"], "extent": [10306, 10539]}], "container": true, "attrs": {"id": "authortimesamples"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Topology Attributes"], "extent": [10539, 10560], "body": [{"type": "para", "indent": 4, "text": ["Controls whether USD topology attributes should be authored as time sampled or default values."], "extent": [10586, 10686]}, {"type": "para", "indent": 4, "text": ["The following attributes are treated as topology attributes:"], "extent": [10686, 10752]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Primitive Type "], "role": "th", "extent": [10752, 10774], "container": true}, {"type": "cell", "indent": 8, "text": ["Attributes "], "role": "th", "extent": [10774, 10796]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["PointBased"]}, " "], "role": "td", "extent": [10796, 10816], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["orientation"]}], "extent": [10816, 10838]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["Mesh"]}, " "], "role": "td", "extent": [10838, 10851], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["faceVertexCounts"]}, ", ", {"type": "code", "text": ["faceVertexIndices"]}, ", and subdivision-related attributes"], "extent": [10851, 10935]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["TetMesh"]}, " "], "role": "td", "extent": [10935, 10951], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["tetVertexIndices"]}, ", ", {"type": "code", "text": ["surfaceFaceVertexIndices"]}], "extent": [10951, 11006]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["NurbsPatch"]}, " "], "role": "td", "extent": [11006, 11025], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["uKnots"]}, ", ", {"type": "code", "text": ["vKnots"]}, ", and ", {"type": "code", "text": ["trimCurve"]}, " attributes"], "extent": [11025, 11080]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["Curves"]}, " "], "role": "td", "extent": [11080, 11095], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["curveVertexCounts"]}], "extent": [11095, 11123]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["BasisCurves"]}, " "], "role": "td", "extent": [11123, 11143], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["type"]}, ", ", {"type": "code", "text": ["basis"]}, ", ", {"type": "code", "text": ["wrap"]}], "extent": [11143, 11175]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["NurbsCurves"]}, " "], "role": "td", "extent": [11175, 11195], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["orders"]}, ", ", {"type": "code", "text": ["ranges"]}, ", ", {"type": "code", "text": ["knots"]}], "extent": [11195, 11231]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["PointInstancer"]}, " "], "role": "td", "extent": [11231, 11254], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["protoIndices"]}], "extent": [11254, 11277]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["GeomSubset"]}, " "], "role": "td", "extent": [11277, 11296], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["indices"]}], "extent": [11296, 11315]}]}], "divider": false}]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Animated"], "extent": [11315, 11329], "body": [{"type": "para", "indent": 8, "text": ["If you know that topology is changing in the source geometry over time, choose this option to record topology attributes as time samples in the USD scene graph. Having animated topology can be very expensive during playback, so only use this option when necessary."], "extent": [11329, 11603]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Static"], "extent": [11603, 11615], "body": [{"type": "para", "indent": 8, "text": ["Write topology attributes as default values. This can make playback much faster, but limits how the topology can change over time."], "extent": [11615, 11755]}], "container": true}, {"type": "dt", "indent": 4, "text": ["None"], "extent": [11755, 11765], "body": [{"type": "para", "indent": 8, "text": ["Do not author topology attributes."], "extent": [11765, 11809]}, {"type": "para", "indent": 8, "text": ["This is useful when USD data is sent to SOPs for processing, then brought back into LOPs. Using this option tells the importer that the geometry topology has not changed in this process, so only the changing point positions or other primvars will be imported."], "extent": [11809, 12078]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "topologyhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attributes"], "extent": [12078, 12090], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying the SOP attributes to import into USD as primvars."], "extent": [12107, 12225]}, {"type": "para", "indent": 4, "text": ["In addition to matching attribute names directly, there are some values with special meanings:"], "extent": [12225, 12325]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["bounds"]}], "extent": [12325, 12339], "body": [{"type": "para", "indent": 8, "text": ["Authors the USD ", {"type": "code", "text": ["extent"]}, " attribute using the calculated bounding box of the associated SOP geometry."], "extent": [12339, 12449]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["visibility"]}], "extent": [12449, 12467], "body": [{"type": "para", "indent": 8, "text": ["Authors the USD visibility attribute based on the value of the ", {"type": "code", "text": ["usdvisibility"]}, " geometry attribute."], "extent": [12467, 12575]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "/solaris/sop_import#attrs", "type": "link", "text": ["importing attributes"], "fullpath": "/solaris/sop_import.html#attrs", "fragment": "#attrs"}, " for information on how the importer converts certain well-known Houdini attributes to their USD equivalents."], "extent": [12575, 12742]}], "container": true, "attrs": {"id": "attribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indexed Attributes"], "extent": [12742, 12762], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying the SOP attributes to import into USD as indexed primvars."], "extent": [12784, 12910]}, {"type": "para", "indent": 4, "text": ["If a SOP attribute matches this pattern, the importer authors the primvar as an indexed array of values (that is, an array of values called ", {"type": "code", "text": ["primvars:", {"type": "var", "text": ["name"]}]}, ", and an array of indices into those values called ", {"type": "code", "text": ["primvars:", {"type": "var", "text": ["name"]}, ":indices"]}, ")."], "extent": [12910, 13155]}, {"type": "para", "indent": 4, "text": ["Preparing an indexed primvar can be expensive for attributes that are not integers or strings. You should only use indexed primvars where it is likely to result in significant savings in storage size due to a small number of unique values being used across a large number of components."], "extent": [13155, 13447]}], "container": true, "attrs": {"id": "indexattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import as Single Element Array"], "extent": [13447, 13479], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying the SOP attributes to import into USD as primvars with ", {"type": "code", "text": ["Constant"]}, " interpolation (an array with a single value for the whole primitive), regardless of whether the SOP geometry attribute is a point, primitive, or vertex attribute. If multiple values could be chosen for a particular USD primitive, the importer chooses the first value it encounters.\n    Importing as a single element array (versus ", {"type": "ui", "text": ["Import as Single Value"]}, ") can be useful since it allows the primvar\u2019s interpolation to be overridden without changing the primvar\u2019s type."], "extent": [13504, 14107]}], "container": true, "attrs": {"id": "constantattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import as Single Value"], "extent": [14107, 14131], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying the SOP attributes to import into USD as primvars with ", {"type": "code", "text": ["Constant"]}, " interpolation and a single value for the whole primitive, regardless of whether the SOP geometry attribute is a point, primitive, or vertex attribute. If multiple values could be chosen for a particular USD primitive, the importer chooses the first value it encounters.\n    This is the default behavior for how detail attributes are imported.\n    This is similar to ", {"type": "ui", "text": ["Import as Single Element Array"]}, ", but the primvar\u2019s type is a scalar value instead of an array with a single element (for example, ", {"type": "code", "text": ["vector3f"]}, " instead of ", {"type": "code", "text": ["vector3f[]"]}, ")."], "extent": [14162, 14831]}], "container": true, "attrs": {"id": "scalarconstantattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Boolean Attributes"], "extent": [14831, 14851], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which integer SOP attributes should be converted to primvars of type ", {"type": "code", "text": ["bool"]}, "."], "extent": [14872, 15016]}], "container": true, "attrs": {"id": "boolattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Set Default Values"], "extent": [15016, 15036], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying the SOP attributes to always author as default values for USD primvars (never time samples). This is the list of exclusions when ", {"type": "ui", "text": ["Author Time Samples"]}, " is set to ", {"type": "ui", "text": ["If Not Specifically Excluded"]}, "."], "extent": [15059, 15323]}], "container": true, "attrs": {"id": "staticattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Partition Attributes"], "extent": [15323, 15345], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP primitive string attributes represent subsets of the geometry. For mesh and curve primitives, the importer puts elements with the same value for this attribute into their own geometry subsets."], "extent": [15371, 15641]}, {"type": "para", "indent": 4, "text": ["The importer will try to set the subset name to the attribute value, but may need to change the name to make it a legal USD primitive name. The importer stores the raw attribute value on the geometry subset prim as Custom Data with the key ", {"type": "code", "text": ["partitionValue"]}, "."], "extent": [15641, 15904]}], "container": true, "attrs": {"id": "partitionattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Prefix Subsets with Attribute Name"], "extent": [15904, 15940], "body": [{"type": "para", "indent": 4, "text": ["When creating subsets from ", {"type": "ui", "text": ["Partition Attributes"]}, ", the subsets are named by combining the attribute name with the partition attribute\u2019s value (a string or integer).\n    This avoids name collisions when multiple partition attributes contain the same values, but can be undesirable if precise control of the subset names is required.\n    For string attributes, if this option is turned off, the attribute values are directly used as the subset names."], "extent": [15972, 16428]}], "container": true, "attrs": {"id": "prefixpartitionsubsets"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Subset Groups"], "extent": [16428, 16443], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of group names/patterns specifying SOP primitive ", {"scheme": null, "value": "/model/groups", "type": "link", "text": ["groups"], "fullpath": "/model/groups.html"}, ". SOP polygon and curve primitives in each group are imported as a geometry subset, named for the group."], "extent": [16465, 16669]}], "container": true, "attrs": {"id": "subsetgroups"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["USD Custom Attributes"], "extent": [16669, 16692], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying the SOP attributes to import into USD as attributes (rather than primvars)."], "extent": [16715, 16858]}], "container": true, "attrs": {"id": "customattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Translate UV Attribute to ST"], "extent": [16858, 16888], "body": [{"type": "para", "indent": 4, "text": ["When turned on, converts the SOP vertex attribute ", {"type": "code", "text": ["uv"]}, " into a USD primvar called ", {"type": "code", "text": ["primvars:st"]}, ". Whether you need to turn this on depends on the renderer you are using and how your shaders are authored. If you are rendering with Karma, leave this off."], "extent": [16913, 17169]}, {"type": "para", "indent": 4, "text": ["(As of this writing there is no strict standard for texture coordinate naming in USD, but the use of ", {"type": "code", "text": ["st"]}, " is a common convention, whereas in SOP geometry, using ", {"type": "code", "text": ["uv"]}, " is the common convention.)"], "extent": [17169, 17366]}], "container": true, "attrs": {"id": "translateuvtost"}, "role": "item"}], "container": true}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Materials"], "extent": [3140, 3156], "body": [{"type": "para", "indent": 0, "text": ["Parameters to define and assign materials to geometry , designed to mimic SOP level material assignments."], "extent": [3156, 3264]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Auto-fill materials"], "extent": [3264, 3285], "body": [{"type": "para", "indent": 4, "text": ["Automatically populates the materials defined through the imported geometry\u2019s ", {"type": "code", "text": ["shop_materialpath"]}, " attribute and assigns them to the imported geometry subsets accordingly."], "extent": [3285, 3461]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Number of Materials"], "extent": [3461, 3482], "body": [{"type": "para", "indent": 4, "text": ["This node can import VOP materials as USD materials. Set the number of materials to import, or use the plus and minus buttons to add or remove imports."], "extent": [3482, 3639]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Material VOP"], "extent": [3639, 3653], "body": [{"type": "para", "indent": 4, "text": ["For each import, the Houdini node path to the material VOP to import as a USD material."], "extent": [3653, 3746]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Material Path"], "extent": [3746, 3761], "body": [{"type": "para", "indent": 4, "text": ["For each import, the USD prim path for the imported USD material prim."], "extent": [3761, 3837]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Geometry Path"], "extent": [3837, 3852], "body": [{"type": "para", "indent": 4, "text": ["For each import, a list of patterns matching USD ", {"type": "strong", "text": ["scene graph paths"]}, " of geometry that should be assigned this imported material."], "extent": [3852, 3987]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [3987, 3996], "body": [{"type": "related_item_group", "body": [{"ext": null, "type": "related_item", "indent": 0, "text": [" ", {"scheme": "Node", "value": "/nodes/lop/sopimport", "type": "link", "text": "", "fullpath": "/nodes/lop/sopimport.html"}], "role": "item", "extent": [3996, 4021]}, {"ext": null, "type": "related_item", "indent": 0, "text": [" ", {"scheme": "Node", "value": "/nodes/lop/sopmodify", "type": "link", "text": "", "fullpath": "/nodes/lop/sopmodify.html"}], "role": "item", "extent": [4021, 4045]}, {"ext": null, "type": "related_item", "indent": 0, "text": [" ", {"scheme": "Node", "value": "/nodes/lop/sceneimport", "type": "link", "text": "", "fullpath": "/nodes/lop/sceneimport.html"}], "role": "item", "extent": [4045, 4071]}], "container": true, "role": "item_group"}], "text": "Related"}], "title": ["SOP Create"], "summary": ["Lets you create geometry in a SOP subnetwork inside this node, so you can create geometry in-place in the LOP network instead of needing a separate SOP network."], "included": ["/nodes/lop/_simple_prims", "/nodes/lop/_sopimport_shared", "/nodes/lop/reference", "/nodes/lop/sopimport", "/nodes/manager/sopnet", "/nodes/obj/common", "/props/_minmax_styles", "/props/mantra", "/solaris/usd"]}