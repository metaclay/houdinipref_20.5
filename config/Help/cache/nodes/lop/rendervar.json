{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "rendervar", "icon": "LOP/rendervar", "group": "rendering", "since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Render Var"], "extent": [0, 15]}, {"type": "summary", "indent": 0, "text": ["Specifies a custom variable computed by the renderer and/or shaders, either a shader output or a light path expression (LPE)."], "extent": [115, 249]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [249, 264], "body": [{"type": "para", "indent": 4, "text": ["A ", {"type": "em", "text": ["RenderVar"]}, " is a custom variable computed by the renderer and/or shaders. The usual case for computing a render var is to include it in a render product as an AOV (an extra data plane in the output image)."], "extent": [264, 478]}, {"type": "para", "indent": 4, "text": ["This node creates a prim which specifies the source of the data (a shader output or ", {"scheme": null, "value": "/render/lpe", "type": "link", "text": ["light path expression"], "fullpath": "/render/lpe.html"}, "). It also allows encoding (generally renderer-specific) parameters that configure the renderer to compute the variable."], "extent": [478, 723]}]}, {"level": 2, "id": "oview", "container": true, "type": "h", "indent": 0, "text": ["Creating vs. editing prims"], "extent": [5350, 5391], "body": [{"type": "para", "indent": 0, "text": ["This node belongs to a class of ", {"type": "strong", "text": ["nodes that create or edit USD prims directly"]}, ". These nodes operate in ", {"type": "em", "text": ["Create mode"]}, " or ", {"type": "em", "text": ["Edit mode"]}, ". This is controlled by a ", {"type": "ui", "text": ["Create primitives"]}, " checkbox or a ", {"type": "em", "text": ["Create/Edit popup menu"]}, ". In create mode, the node creates new prims. In edit mode, the node changes the attributes on an existing prim. The ", {"type": "em", "text": ["Edit mode"]}, " has two variations. ", {"type": "em", "text": ["Edit"]}, " will not modify primitives which have a ", {"type": "code", "text": ["houdini:editable"]}, " attribute set to ", {"type": "code", "text": ["false"]}, ". ", {"type": "em", "text": ["Force edit"]}, " will modify a primitive regardless of the existence or value of this attribute. This attribute can be set on a primitive using the ", {"scheme": null, "value": "/nodes/lop/configureprimitive", "type": "link", "text": ["Configure Primitives LOP"], "fullpath": "/nodes/lop/configureprimitive.html"}, "."], "extent": [5391, 6053]}, {"type": "para", "indent": 0, "text": ["Parameters that correspond to a USD attribute have a pop-up menu to the left that controls ", {"type": "em", "text": ["how"]}, " the node authors the attribute."], "extent": [6053, 6183]}, {"type": "para", "indent": 0, "text": ["In addition to that, any connectable USD attributes (i.e., the ones in the ", {"type": "code", "text": ["inputs:"]}, " namespace) will have menu items that allow disconnecting them from their sources."], "extent": [6183, 6351]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [6351, 6357], "body": [{"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Pop-up menu item "], "role": "th", "extent": [6384, 6408], "container": true, "attrs": {"width": "25%"}}, {"type": "cell", "indent": 8, "text": ["Meaning "], "role": "th", "extent": [6428, 6447]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set or Create "], "role": "td", "extent": [6447, 6468], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Sets the attribute to the given value, whether it previously existed or not."], "extent": [6468, 6554]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set If Exists "], "role": "td", "extent": [6554, 6574], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Only set the attribute to the given value if it previously existed."], "extent": [6574, 6651]}, {"type": "para", "indent": 8, "text": ["Use this mode to make sure an attribute is only set on primitives of the correct type. For example, only ", {"type": "code", "text": ["UsdGeomSphere"]}, " primitives are likely to have a ", {"type": "code", "text": ["radius"]}, " attribute."], "extent": [6651, 6833]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Block "], "role": "td", "extent": [6833, 6845], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Makes the attribute appear to not exist, so it takes on its default value. (If the attribute doesn\u2019t already exist on the prim, this does nothing.)"], "extent": [6845, 7002]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Disconnect Input "], "role": "td", "extent": [7002, 7025], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Deletes the attribute input connection to its source. Input connections take precedence over attribute values, so disconnecting an input allows the attribute value to take effect."], "extent": [7025, 7214]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Do Nothing "], "role": "td", "extent": [7214, 7231], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Ignore this parameter, don\u2019t create or change the attribute in any way."], "extent": [7231, 7313]}]}], "divider": false}]}], "container": true, "attrs": {"id": "control_menu"}}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [755, 766], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Pixar\u2019s specification calls for all RenderSettings, RenderVar, and RenderProduct prims to be under ", {"type": "code", "text": ["/Render"]}, " in the scene graph tree (so the render pipeline isn\u2019t required to traverse the entire tree looking for them)."], "extent": [766, 989]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["See Pixar\u2019s ", {"scheme": null, "value": "https://graphics.pixar.com/usd/docs/Render-Settings-in-USD-Proposal.html", "type": "link", "text": ["render settings proposal"], "exists": true}, " for more information."], "extent": [989, 1127]}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1127, 1139], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Sampling Behavior"], "extent": [2242, 2262], "body": [{"type": "para", "indent": 4, "text": ["Cooking this node can generate many USD time samples, rather than just a single time sample at the current time. This can be equivalent to having a ", {"scheme": "Node", "value": "/nodes/lop/cache", "type": "link", "text": ["Cache LOP"], "fullpath": "/nodes/lop/cache.html"}, " following this node, but it will evaluate much faster, and does not cache data from any other nodes. This allows animated data to be authored to USD without introducing a node time dependency which would then cause all following nodes to also be time dependent. This can vastly improve playback performance of some LOP Networks."], "extent": [2262, 2771]}, {"type": "para", "indent": 4, "text": ["In all sampling modes, if a parameter on this node does not vary with time, and does not rely on other time sampled data from the stage, only a single default value will be generated in USD for the corresponding attribute. USD time samples are only generated for parameters that may vary over time."], "extent": [2771, 3075]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Sample Current Frame"], "extent": [3075, 3101], "body": [{"type": "para", "indent": 8, "text": ["A single time sample will be generated for the current time."], "extent": [3101, 3171]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Sample Frame Range If Input Is Not Time Dependent"], "extent": [3171, 3226], "body": [{"type": "para", "indent": 8, "text": ["If the input to this node is time dependent, this node behaves as if it is in ", {"type": "code", "text": ["Sample current frame"]}, " mode. Otherwise it behaves as if it is in ", {"type": "code", "text": ["Sample frame range"]}, " mode."], "extent": [3226, 3405]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Sample Frame Range"], "extent": [3405, 3429], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "ui", "text": ["Start/End/Inc"]}, " parameter is used to generate multiple times at which this node\u2019s parameters are evaluated, and a USD time sample is created for each attribute at each one of these times."], "extent": [3429, 3632]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start/End/Inc"], "extent": [3632, 3647], "body": [{"type": "para", "indent": 4, "text": ["When the ", {"type": "ui", "text": ["Sampling behavior"]}, " is ", {"type": "code", "text": ["Sample frame range"]}, ", this parameter controls the number and spacing of base time samples to be generated by this node. The default values of this parameter are ", {"type": "code", "text": ["@fstart"]}, ", ", {"type": "code", "text": ["@fend"]}, ", and ", {"type": "code", "text": ["@finc"]}, ". These values correspond to the start, end, and step size of the global Houdini animation settings when interacting with Houdini. When using a ROP node to generate a range of frames, these values correspond to the start, end, and increment values specified on the ROP node being executed. This default ensures that a USD file written to disk will contain time samples for exactly the frame range requested by the ROP (regardless of the Houdini animation settings)."], "extent": [3647, 4343]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Subframe Sampling"], "extent": [56, 79], "body": [{"type": "para", "indent": 8, "text": ["For each primary sample generated by this node, these parameters can cause additional samples to be generated around that primary sample time. This is most often used to ensure that accurate data exists at exactly the camera shutter open and close times, as well as at the primary sample time."], "extent": [79, 382]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Shutter"], "extent": [382, 395], "body": [{"type": "para", "indent": 8, "text": ["Controls the method used to specify the shutter open and close times relative to the primary sample times."], "extent": [395, 511]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Specify Manually"], "extent": [511, 537], "body": [{"type": "para", "indent": 12, "text": ["The ", {"type": "ui", "text": ["Shutter Open/Close"]}, " parameter values provide exact offset values relative to the primary sample time."], "extent": [537, 659]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Use Camera Prim"], "extent": [659, 684], "body": [{"type": "para", "indent": 12, "text": ["The ", {"type": "ui", "text": ["Camera Prim"]}, " parameter provides the scene graph path of a camera primitive from which the shutter open and close times are extracted to provide the offset values relative to the primary time sample."], "extent": [684, 903]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Shutter Open/Close"], "extent": [903, 927], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Shutter"]}, " is set to ", {"type": "ui", "text": ["Specify Manually"]}, ", these two offset values are added to the primary sample time to indicate the shutter open and close times. The open time should be less than or equal to zero, and the close time should be greater than or equal to zero."], "extent": [927, 1204]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Camera Prim"], "extent": [1204, 1221], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Shutter"]}, " is set to ", {"type": "ui", "text": ["Use Camera Prim"]}, ", this is the scene graph path of a camera prim on the input node\u2019s stage. The shutter open and close attribute values are read from this primitive."], "extent": [1221, 1425]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Samples"], "extent": [1425, 1438], "body": [{"type": "para", "indent": 8, "text": ["The number of subframe samples to create for each primary sample. These samples are evenly distributed between the shutter open and close times. Note that such an even distribution may or may not create a sample at exactly the primary sample time."], "extent": [1438, 1695]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Always Include Frame Sample"], "extent": [1695, 1728], "body": [{"type": "para", "indent": 8, "text": ["When turned on, forces a sample to be created at exactly the primary sample time. If the ", {"type": "ui", "text": ["Samples"]}, " value, together with the shutter open and close times, already place a sample at the primary sample time, turning on this option has no effect. Otherwise, this option causes an addition sample to be added. This means that the actual number of samples per primary sample may in fact be one more than the number specified in the ", {"type": "ui", "text": ["Samples"]}, " parameter."], "extent": [1728, 2189]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Action"], "extent": [50, 62], "body": [{"type": "para", "indent": 8, "text": ["Whether this node should create new prims, or edit existing prims. In addition, the ", {"type": "code", "text": ["Force Edit"]}, " option can be chosen to cause this node to ignore the ", {"type": "code", "text": ["houdini:editable"]}, " attribute on prims, and always edit the specified attributes. This is in contrast to the ", {"type": "code", "text": ["Edit"]}, " mode which will trigger a warning and not set attributes on prims with the ", {"type": "code", "text": ["houdini:editable"]}, " attribute set to ", {"type": "code", "text": ["false"]}, "."], "extent": [88, 483]}], "container": true, "attrs": {"id": "createprims"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Primitive Path"], "extent": [483, 503], "body": [{"type": "para", "indent": 8, "text": ["In create mode, this lets you control where in the scene graph to create the prim(s)."], "extent": [526, 621]}, {"type": "para", "indent": 8, "text": ["The default is usually ", {"type": "code", "text": ["/$OS"]}, ". This creates a primitive at the root level with the same name as the node (for example, ", {"type": "code", "text": ["/tube1"]}, "). This is a useful default for preventing naming conflicts, but terrible for organization. You should try to remember to change the ", {"type": "ui", "text": ["Primitive path"]}, " to a better value when you create prims."], "extent": [621, 950]}, {"type": "para", "indent": 8, "text": ["For example, instead of naming models after the node that created them, you might want to name them after the geometry inside, and organize them under a ", {"type": "code", "text": ["/Models"]}, " branch."], "extent": [950, 1130]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "q", "text": ["Create primitives"]}, " section contains basic controls for how to create the new prim(s)."], "extent": [1130, 1230]}], "container": true, "attrs": {"id": "primpath"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Primitives"], "extent": [1230, 1246], "body": [{"type": "para", "indent": 8, "text": ["In edit mode, the node has a ", {"type": "ui", "text": ["Primitive pattern"]}, " parameter. This lets you specify the prim(s) the node should operate on. You can click the select button beside the text box to select the primitives from the scene graph tree. You can also use ", {"scheme": null, "value": "/solaris/pattern", "type": "link", "text": ["primitive patterns"], "fullpath": "/solaris/pattern.html"}, " for advanced matching, including matching all prims in a collection."], "extent": [1272, 1633]}], "container": true, "attrs": {"id": "primpattern"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Initialize Parameters"], "extent": [1633, 1660], "body": [{"type": "para", "indent": 8, "text": ["Changes the state of all control menu parameters to ", {"type": "code", "text": ["Do Nothing"]}, ", so that this node will not apply any changes. Also grabs the current values of each property from the first ", {"type": "ui", "text": ["Primitives"]}, " match, and sets the values of the corresponding parameters to match. This means that changing any parameter\u2019s control menu to ", {"type": "code", "text": ["Set or Create"]}, " mode will set the property to its current value, making it easier to apply changes to an existing value rather than setting a brand new value."], "extent": [1686, 2169]}], "container": true, "attrs": {"id": "initforedit"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Primitives"], "extent": [7360, 7380], "body": [{"type": "para", "indent": 4, "text": ["This section only appears when the node is creating primitives."], "extent": [7380, 7449]}, {"type": "para", "indent": 4, "text": ["For example:"], "extent": [7449, 7467]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["If you want to create a new cube primitive at ", {"type": "code", "text": ["/world/objects/cube1"]}, " on an empty stage: Set ", {"type": "ui", "text": ["Primitive Specifier"]}, " to ", {"type": "q", "text": ["Define"]}, ", and the ", {"type": "ui", "text": ["Parent Primitive Type"]}, " to ", {"type": "q", "text": ["Xform"]}, "."], "extent": [7467, 7649]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["If you want to override the radius of a sphere at ", {"type": "code", "text": ["/world/objects/sphere1"]}, ": Set ", {"type": "ui", "text": ["Primitive Specifier"]}, " to ", {"type": "q", "text": ["Over"]}, ", and the ", {"type": "ui", "text": ["Parent Primitive Type"]}, " to None. This makes sure the primitive types of any existing ancestor prims are not be modified by this node."], "extent": [7649, 7915]}], "container": true}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Primitive Count"], "extent": [7915, 7936], "body": [{"type": "para", "indent": 8, "text": ["The number of primitives to create."], "extent": [7936, 7981]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Primitive Kind"], "extent": [7981, 8001], "body": [{"type": "para", "indent": 8, "text": ["Set all created prims to have this ", {"scheme": null, "value": "/solaris/usd#kinds", "type": "link", "text": ["kind"], "fullpath": "/solaris/usd.html#kinds", "fragment": "#kinds"}, "."], "extent": [8024, 8095]}], "container": true, "attrs": {"id": "primkind"}}, {"type": "dt", "indent": 4, "text": ["Primitive Specifier"], "extent": [8095, 8120], "body": [{"type": "para", "indent": 8, "text": ["The USD operator to use when creating the new prims."], "extent": [8144, 8206]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Define"], "extent": [8206, 8222], "body": [{"type": "para", "indent": 12, "text": ["Authors a completely new prim. Use this if you want to create a brand new prim or replace an existing prim."], "extent": [8222, 8343]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Over"], "extent": [8343, 8357], "body": [{"type": "para", "indent": 12, "text": ["Authors an override of an existing prim. Attributes not explicitly authored on this prim will get their values from the existing prim on the lower layer."], "extent": [8357, 8524]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Class"], "extent": [8524, 8539], "body": [{"type": "para", "indent": 12, "text": ["Define a primitive class. This is usually not necessary unless you are doing deep USD magic."], "extent": [8539, 8645]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "specifier"}}, {"type": "dt", "indent": 4, "text": ["Class Ancestor"], "extent": [8645, 8665], "body": [{"type": "para", "indent": 8, "text": ["If the ", {"type": "ui", "text": ["Specifier"]}, " is ", {"type": "code", "text": ["Define"]}, " or ", {"type": "code", "text": ["Over"]}, ", this parameter will cause some ancestor primitives to be authored with a specifier of ", {"type": "code", "text": ["Class"]}, ". This makes it easy to create an ", {"type": "code", "text": ["Over"]}, " or ", {"type": "code", "text": ["Define"]}, " within a ", {"type": "code", "text": ["Class"]}, " without having to use two separate nodes. When the ", {"type": "ui", "text": ["Specifier"]}, " is ", {"type": "code", "text": ["Class"]}, ", this parameter is disabled because the entire primitive hierarchy is already authored as ", {"type": "code", "text": ["Class"]}, " primitives."], "extent": [8693, 9095]}], "container": true, "attrs": {"id": "classancestor"}}, {"type": "dt", "indent": 4, "text": ["Parent Primitive Type"], "extent": [9095, 9122], "body": [{"type": "para", "indent": 8, "text": ["If any parents of a path in ", {"type": "ui", "text": ["Primitive paths"]}, " do not exist, this node will automatically create them. In this case, it will create parent nodes of this type."], "extent": [9151, 9321]}], "container": true, "attrs": {"id": "parentprimtype"}}], "container": true}], "container": true, "role": "item"}], "container": true}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Standard"], "extent": [1307, 1322], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Data Type"], "extent": [1322, 1334], "body": [{"type": "para", "indent": 4, "text": ["The USD data type of the render variable."], "extent": [1352, 1399]}, {"type": "para", "indent": 4, "text": ["When saving to OpenEXR files, the data type is used to determine the channel names. For example, if the data type is ", {"type": "code", "text": ["color3f"]}, ", the channel names will be ", {"type": "code", "text": ["R"]}, ", ", {"type": "code", "text": ["G"]}, ", ", {"type": "code", "text": ["B"]}, ", while if the data type is ", {"type": "code", "text": ["normal3f"]}, ", the channel names will be ", {"type": "code", "text": ["x"]}, ", ", {"type": "code", "text": ["y"]}, ", ", {"type": "code", "text": ["z"]}, "."], "extent": [1399, 1652]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 4, "role": "item", "extent": [1652, 1661], "body": [{"type": "para", "indent": 8, "text": ["If you're rendering with ", {"scheme": null, "value": "/ref/utils/husk", "type": "link", "text": ["husk"], "fullpath": "/ref/utils/husk.html"}, " and want color channel names to be lower case (for example  ", {"type": "code", "text": ["r"]}, ", ", {"type": "code", "text": ["g"]}, ", ", {"type": "code", "text": ["b"]}, "), add another ", {"scheme": "Node", "value": "/nodes/lop/rendervar", "type": "link", "text": ["Render Var LOP"], "fullpath": "/nodes/lop/rendervar.html"}, " and use it to set the ", {"type": "code", "text": ["driver:parameters:aov:channel_lower_rgb"]}, " (", {"type": "code", "text": ["bool"]}, ") render var to ", {"type": "code", "text": ["true"]}, "."], "extent": [1661, 1937]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "dataType"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Source Name"], "extent": [1937, 1950], "body": [{"type": "para", "indent": 4, "text": ["Where to get the render variable contents. See ", {"type": "ui", "text": ["Source type"]}, " below."], "extent": [1970, 2045]}, {"type": "para", "indent": 4, "text": ["The renderer should look for an output with this name as the computed value for the RenderVar."], "extent": [2045, 2145]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 4, "role": "item", "extent": [2145, 2154], "body": [{"type": "para", "indent": 8, "text": ["In Karma, with ", {"type": "code", "text": ["Raw"]}, " and ", {"type": "code", "text": ["Primvar"]}, " (including Cryptomatte) ", {"type": "ui", "text": ["Source type"]}, ", it\u2019s possible to prefix variable name with ", {"type": "code", "text": ["noholdouts;"]}, " to indicate that matte or background holdouts should ", {"type": "strong", "text": ["not"]}, " contribute to the AOV. For example, to output normal ", {"type": "code", "text": ["N"]}, " AOV without holdouts, enter: ", {"type": "code", "text": ["ray:noholdouts;N"]}], "extent": [2154, 2460]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "sourceName"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Source Type"], "extent": [2460, 2473], "body": [{"type": "para", "indent": 4, "text": ["How to interpret the ", {"type": "ui", "text": ["Source name"]}, " parameter."], "extent": [2493, 2546]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Raw"], "extent": [2546, 2555], "body": [{"type": "para", "indent": 8, "text": ["Pass the source name directly to the renderer. This assumes the renderer knows how to interpret the source name string. This is the default."], "extent": [2555, 2705]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Primvar"], "extent": [2705, 2718], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "ui", "text": ["Source name"]}, " is the name of primvar."], "extent": [2718, 2771]}, {"type": "para", "indent": 8, "text": ["Some renderers may use this to ensure that the primvar is provided to the renderer. Other renderers may require that a suitable material network be provided, in which case this is simply an advisory setting."], "extent": [2771, 2988]}], "container": true}, {"type": "dt", "indent": 4, "text": ["LPE"], "extent": [2988, 2997], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "ui", "text": ["Source name"]}, " is a ", {"scheme": null, "value": "/render/lpe", "type": "link", "text": ["Light Path Expression"], "fullpath": "/render/lpe.html"}, "."], "extent": [2997, 3068]}, {"type": "para", "indent": 8, "text": ["(Some renderers may accept extensions to the OSL Light Path Expression syntax, which will necessarily be non-portable.)"], "extent": [3068, 3197]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Intrinsic"], "extent": [3197, 3212], "body": [{"type": "para", "indent": 8, "text": [{"type": "strong", "text": ["Currently not implemented"]}, ". In the future, USD may provide for a portable list of baseline rendervars, such as camera depth, that would be implemented by all renderers."], "extent": [3212, 3391]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "sourceType"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Name"], "extent": [3391, 3397], "body": [{"type": "para", "indent": 4, "text": ["The name of the AOV in the output image that stores the data from this rendervar."], "extent": [3411, 3498]}], "container": true, "attrs": {"id": "name"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Format"], "extent": [3498, 3506], "body": [{"type": "para", "indent": 4, "text": ["The data format that should be used when saving this image plane to the output file."], "extent": [3522, 3612]}], "container": true, "attrs": {"id": "format"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["EXR Channel Prefix"], "extent": [3612, 3632], "body": [{"type": "para", "indent": 4, "text": ["When saving to OpenEXR files, husk uses this as the prefix for channel names.  For single value channels, this value will be used as the channel name.  For example, for a normal AOV, if the prefix is ", {"type": "code", "text": ["nml"]}, ", the channels will be named ", {"type": "code", "text": ["nml.x"]}, ", ", {"type": "code", "text": ["nml.y"]}, " and ", {"type": "code", "text": ["nml.z"]}, "."], "extent": [3679, 3948]}], "container": true, "attrs": {"id": "driver:parameters:aov:channel_prefix"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Multi-sampled"], "extent": [3948, 3963], "body": [{"type": "para", "indent": 4, "text": ["Whether the render buffer should be multisampled."], "extent": [3985, 4040]}], "container": true, "attrs": {"id": "multiSampled"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Clear value"], "extent": [4040, 4053], "body": [{"type": "para", "indent": 4, "text": ["The initial value to fill the buffer with before rendering. Usually this is ", {"type": "code", "text": ["0"]}, ", however for example for ", {"type": "code", "text": ["Pz"]}, " you might set it to ", {"type": "code", "text": ["1e17"]}, "."], "extent": [4073, 4217]}], "container": true, "attrs": {"id": "clearValue"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Husk"], "extent": [4217, 4228], "body": [{"type": "para", "indent": 0, "text": ["The ", {"type": "code", "text": ["husk"]}, " command line renderer looks for properties on the RenderVar to control how each AOV is interpreted when saving to the output product."], "extent": [4228, 4375]}, {"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Channel Prefix"], "role": "item", "extent": [4375, 4393], "body": [{"type": "para", "indent": 4, "text": ["When creating channel names for an AOV, ", {"type": "code", "text": ["husk"]}, " will create channel component names based on the type of data. For example, a color channel\u2019s names would be ", {"type": "code", "text": ["R"]}, ", ", {"type": "code", "text": ["G"]}, ", ", {"type": "code", "text": ["B"]}, ".\n    This option allows you to prefix the component names with a common name.  For example, setting the prefix to ", {"type": "code", "text": ["diffuse"]}, " would cause the component names to be ", {"type": "code", "text": ["diffuse.R"]}, ", ", {"type": "code", "text": ["diffuse.G"]}, ", ", {"type": "code", "text": ["diffuse.B"]}, "."], "extent": [4444, 4820]}], "container": true, "attrs": {"id": "driver:parameters:aov:husk:channel_prefix"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Channel Lower RGB"], "role": "item", "extent": [4820, 4841], "body": [{"type": "para", "indent": 4, "text": ["Normally, ", {"type": "code", "text": ["husk"]}, " will create OpenEXR channel suffixes for color channels using uppercase ", {"type": "code", "text": ["R"]}, ", ", {"type": "code", "text": ["G"]}, ", ", {"type": "code", "text": ["B"]}, " and ", {"type": "code", "text": ["A"]}, ".  If this option is turned on, the suffixes will be lower-case ", {"type": "code", "text": ["r"]}, ", ", {"type": "code", "text": ["g"]}, ", ", {"type": "code", "text": ["b"]}, " and ", {"type": "code", "text": ["a"]}, ".  For example ", {"type": "code", "text": ["diffuse.r"]}, ", ", {"type": "code", "text": ["diffuse.g"]}, ", ", {"type": "code", "text": ["diffuse.b"]}, " instead of ", {"type": "code", "text": ["diffuse.R"]}, ", ", {"type": "code", "text": ["diffuse.G"]}, ", ", {"type": "code", "text": ["diffuse.B"]}, ".  This only applies to color channels."], "extent": [4895, 5236]}], "container": true, "attrs": {"id": "driver:parameters:aov:husk:channel_lower_rgb"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Source Color Space"], "role": "item", "extent": [5236, 5258], "body": [{"type": "para", "indent": 4, "text": ["Specifies the source color space for the RenderVar.  This is usually the internal working space for the render delegate (i.e. ", {"type": "code", "text": ["scene_linear"]}, ").  This option allows the source color space to be manually specified. Normally. non-color AOVs (i.e. point or normal data) will default to the ", {"type": "code", "text": ["raw"]}, " color space.  This option can force these AOVs to be interpreted as a color with the given color space."], "extent": [5312, 5712]}], "container": true, "attrs": {"id": "driver:parameters:aov:husk:source_colorspace"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Output Color Space"], "role": "item", "extent": [5712, 5734], "body": [{"type": "para", "indent": 4, "text": ["Specifies the output color space for the RenderVar.  This is the color space that the source color data will be transformed to before writing to the render product output. By default, ", {"type": "code", "text": ["husk"]}, " will use the OpenColorIO ", {"type": "code", "text": ["file_rules"]}, " to determine the output color space automatically. Normally, non-color AOVs (i.e. ", {"type": "code", "text": ["point"]}, " or ", {"type": "code", "text": ["normal data"]}, ") will default to the ", {"type": "code", "text": ["raw"]}, " color space.  This option can force these AOVs to be interpreted as color data and transform the color before writing."], "extent": [5788, 6275]}], "container": true, "attrs": {"id": "driver:parameters:aov:husk:output_colorspace"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Compression"], "role": "item", "extent": [6275, 6290], "body": [{"type": "para", "indent": 4, "text": ["Some formats allow per-AOV compression. This will set the compression on this AOV."], "extent": [6338, 6426]}], "container": true, "attrs": {"id": "driver:parameters:aov:husk:compression"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["OpenEXR Compression"], "role": "item", "extent": [6426, 6449], "body": [{"type": "para", "indent": 4, "text": ["When saving multi-part OpenEXR images, this specifies the compression for this AOV.  For example, you may want to use a lossy compression (like ", {"type": "code", "text": ["DWA"]}, ") for color channels, but a non-lossy compression (like ", {"type": "code", "text": ["piz"]}, ") when saving geometric normals."], "extent": [6505, 6753]}], "container": true, "attrs": {"id": "driver:parameters:aov:husk:OpenEXR:compression"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["DWA Compression Level"], "role": "item", "extent": [6753, 6778], "body": [{"type": "para", "indent": 4, "text": ["The compression level when using DWA-A or DWA-B compression."], "extent": [6838, 6904]}], "container": true, "attrs": {"id": "driver:parameters:aov:husk:OpenEXR:dwa_compression"}}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Karma"], "extent": [6904, 6916], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Pixel Filter"], "role": "item", "extent": [6916, 6933], "body": [{"type": "para", "indent": 4, "text": ["Image plane pixel filters are used to combine multiple samples into a\n    single pixel color. For example, the filter may choose a single sample\n    (closest to the camera, or maximum value), or most commonly, the pixel\n    filter will choose to average the sample values."], "extent": [6982, 7260]}, {"type": "para", "indent": 4, "text": ["This parameter specifies a list of filters.  These filters are specified as\n    a JSON list."], "extent": [7260, 7358]}], "container": true, "attrs": {"id": "karma:plane:filter", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dithering"], "role": "item", "extent": [7358, 7371], "body": [{"type": "para", "indent": 4, "text": ["When Karma quantizes pixels to 8 or 16 bit integer channels, this\n    specifies the dithering to be used.  This is only done if the AOV is\n    specified as 8/16 bit output depth.  It will not be done if conversion is\n    done when writing floating point values to an image format that only\n    supports 8/16 bit integer channel data."], "extent": [7420, 7759]}], "container": true, "attrs": {"id": "karma:plane:dither", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Default value"], "role": "item", "extent": [7759, 7776], "body": [{"type": "para", "indent": 4, "text": ["This is the clear color for the image plane."], "extent": [7831, 7881]}], "container": true, "attrs": {"id": "karma:plane:defaultvalue", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Enable Cryptomatte"], "role": "item", "extent": [7881, 7903], "body": [{"type": "para", "indent": 4, "text": ["Enable this to turn this image plane into Cryptomatte layer. See\n    ", {"scheme": null, "value": "/solaris/cryptomatte", "type": "link", "text": ["Cryptomatte"], "fullpath": "/solaris/cryptomatte.html"}, " for more info."], "extent": [7957, 8081]}], "container": true, "attrs": {"id": "karma:plane:cryptomatte", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Cryptomatte Max Overlap"], "role": "item", "extent": [8081, 8108], "body": [{"type": "para", "indent": 4, "text": ["Maximum number of IDs that can be stored in a single pixel. A value of ", {"type": "code", "text": ["6"]}, " is\n    recommended."], "extent": [8166, 8266]}], "container": true, "attrs": {"id": "karma:plane:cryptomatterank", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Cryptomatte Manifest File"], "role": "item", "extent": [8266, 8295], "body": [{"type": "para", "indent": 4, "text": ["Optional external manifest file. It will be saved into same directory as\n    the render product. If this path is unspecified, the manifest will be\n    embedded into render product as metadata."], "extent": [8356, 8555]}], "container": true, "attrs": {"id": "karma:plane:cryptomattesidecar", "kagroup": "Image"}}], "container": true, "role": "item_group"}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [8555, 8564], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/karma", "type": "link", "text": "", "fullpath": "/nodes/lop/karma.html"}], "extent": [8564, 8584]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/karmarenderproperties", "type": "link", "text": "", "fullpath": "/nodes/lop/karmarenderproperties.html"}], "extent": [8584, 8619]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/karmastandardrendervars", "type": "link", "text": "", "fullpath": "/nodes/lop/karmastandardrendervars.html"}], "extent": [8619, 8656]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/renderproduct", "type": "link", "text": "", "fullpath": "/nodes/lop/renderproduct.html"}], "extent": [8656, 8683]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/rendersettings", "type": "link", "text": "", "fullpath": "/nodes/lop/rendersettings.html"}], "extent": [8683, 8711]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/rendervar", "type": "link", "text": "", "fullpath": "/nodes/lop/rendervar.html"}], "extent": [8711, 8734]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "/render/lpe", "type": "link", "text": ["Light Path Expressions"], "fullpath": "/render/lpe.html"}], "extent": [8734, 8773]}], "container": true}], "text": "Related"}], "title": ["Render Var"], "summary": ["Specifies a custom variable computed by the renderer and/or shaders, either a shader output or a light path expression (LPE)."], "included": ["/nodes/lop/_sampling", "/nodes/lop/_simple_prims"]}